
UART_TRANSMIT_RECEIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003504  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a0  080037a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000140  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008090  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014d2  00000000  00000000  00028130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  00029608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000658  00000000  00000000  00029ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209d7  00000000  00000000  0002a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008336  00000000  00000000  0004ad17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b29  00000000  00000000  0005304d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116b76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023b0  00000000  00000000  00116bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800367c 	.word	0x0800367c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800367c 	.word	0x0800367c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fbc2 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f87a 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f952 	bl	8000838 <MX_GPIO_Init>
  MX_UART5_Init();
 8000594:	f000 f8fc 	bl	8000790 <MX_UART5_Init>
  MX_UART4_Init();
 8000598:	f000 f8d0 	bl	800073c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f922 	bl	80007e4 <MX_USART1_UART_Init>
	  strcpy(data, "led off\r\n");
	  HAL_UART_Transmit(&huart5,(uint8_t *)data,strlen(data), 1000);
	  HAL_Delay(1000);
	  */

	  strcpy(data,"sistem_baslatiliyor..\r\n");
 80005a0:	4a31      	ldr	r2, [pc, #196]	; (8000668 <main+0xe4>)
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <main+0xe8>)
 80005a4:	4614      	mov	r4, r2
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b0:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart5, (uint8_t *)data , strlen(data), 1000);
 80005b4:	482c      	ldr	r0, [pc, #176]	; (8000668 <main+0xe4>)
 80005b6:	f7ff fe0b 	bl	80001d0 <strlen>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	4929      	ldr	r1, [pc, #164]	; (8000668 <main+0xe4>)
 80005c4:	482a      	ldr	r0, [pc, #168]	; (8000670 <main+0xec>)
 80005c6:	f001 fbba 	bl	8001d3e <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ce:	f000 fc11 	bl	8000df4 <HAL_Delay>

	  sprintf(data,"sistem_acik_veri_gonderebilirsiniz\r\n");
 80005d2:	4928      	ldr	r1, [pc, #160]	; (8000674 <main+0xf0>)
 80005d4:	4824      	ldr	r0, [pc, #144]	; (8000668 <main+0xe4>)
 80005d6:	f002 f811 	bl	80025fc <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)data, strlen(data), 1000);
 80005da:	4823      	ldr	r0, [pc, #140]	; (8000668 <main+0xe4>)
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	491f      	ldr	r1, [pc, #124]	; (8000668 <main+0xe4>)
 80005ea:	4821      	ldr	r0, [pc, #132]	; (8000670 <main+0xec>)
 80005ec:	f001 fba7 	bl	8001d3e <HAL_UART_Transmit>

	  HAL_UART_Receive(&huart5, (uint8_t *)rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	220a      	movs	r2, #10
 80005f6:	4920      	ldr	r1, [pc, #128]	; (8000678 <main+0xf4>)
 80005f8:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0xec>)
 80005fa:	f001 fc32 	bl	8001e62 <HAL_UART_Receive>
	  HAL_Delay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000602:	f000 fbf7 	bl	8000df4 <HAL_Delay>
	  printf("\n");
 8000606:	200a      	movs	r0, #10
 8000608:	f001 ffe2 	bl	80025d0 <putchar>

	  sprintf(data,"sifrelenecek_veri :");
 800060c:	491b      	ldr	r1, [pc, #108]	; (800067c <main+0xf8>)
 800060e:	4816      	ldr	r0, [pc, #88]	; (8000668 <main+0xe4>)
 8000610:	f001 fff4 	bl	80025fc <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)data, strlen(data), 1000);
 8000614:	4814      	ldr	r0, [pc, #80]	; (8000668 <main+0xe4>)
 8000616:	f7ff fddb 	bl	80001d0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	4911      	ldr	r1, [pc, #68]	; (8000668 <main+0xe4>)
 8000624:	4812      	ldr	r0, [pc, #72]	; (8000670 <main+0xec>)
 8000626:	f001 fb8a 	bl	8001d3e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart5, (uint8_t *)rx_buffer, strlen(rx_buffer), 1000);
 800062a:	4813      	ldr	r0, [pc, #76]	; (8000678 <main+0xf4>)
 800062c:	f7ff fdd0 	bl	80001d0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	490f      	ldr	r1, [pc, #60]	; (8000678 <main+0xf4>)
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <main+0xec>)
 800063c:	f001 fb7f 	bl	8001d3e <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000644:	f000 fbd6 	bl	8000df4 <HAL_Delay>

	  HAL_UART_Transmit(&huart4, (uint8_t *)rx_buffer, strlen(rx_buffer), 1000);
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0xf4>)
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	4908      	ldr	r1, [pc, #32]	; (8000678 <main+0xf4>)
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <main+0xfc>)
 800065a:	f001 fb70 	bl	8001d3e <HAL_UART_Transmit>
	  HAL_Delay(500);
 800065e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000662:	f000 fbc7 	bl	8000df4 <HAL_Delay>
  {
 8000666:	e79b      	b.n	80005a0 <main+0x1c>
 8000668:	20000158 	.word	0x20000158
 800066c:	08003694 	.word	0x08003694
 8000670:	200000d0 	.word	0x200000d0
 8000674:	080036ac 	.word	0x080036ac
 8000678:	2000018c 	.word	0x2000018c
 800067c:	080036d4 	.word	0x080036d4
 8000680:	2000008c 	.word	0x2000008c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 ff94 	bl	80025c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <SystemClock_Config+0xb0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <SystemClock_Config+0xb0>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <SystemClock_Config+0xb0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <SystemClock_Config+0xb4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1a      	ldr	r2, [pc, #104]	; (8000738 <SystemClock_Config+0xb4>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <SystemClock_Config+0xb4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fe3e 	bl	8001374 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006fe:	f000 f8fb 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f8a1 	bl	8001864 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000728:	f000 f8e6 	bl	80008f8 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_UART4_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_UART4_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_UART4_Init+0x4c>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_UART4_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_UART4_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_UART4_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_UART4_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_UART4_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_UART4_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_UART4_Init+0x4c>)
 8000774:	f001 fa96 	bl	8001ca4 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f8bb 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008c 	.word	0x2000008c
 800078c:	40004c00 	.word	0x40004c00

08000790 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_UART5_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_UART5_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_UART5_Init+0x4c>)
 800079c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_UART5_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_UART5_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_UART5_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_UART5_Init+0x4c>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_UART5_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_UART5_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_UART5_Init+0x4c>)
 80007c8:	f001 fa6c 	bl	8001ca4 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80007d2:	f000 f891 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000d0 	.word	0x200000d0
 80007e0:	40005000 	.word	0x40005000

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART1_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 800081c:	f001 fa42 	bl	8001ca4 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f867 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000114 	.word	0x20000114
 8000834:	40011000 	.word	0x40011000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a26      	ldr	r2, [pc, #152]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a1f      	ldr	r2, [pc, #124]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_GPIO_Init+0xb8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_GPIO_Init+0xb8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_GPIO_Init+0xb8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_GPIO_Init+0xb8>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <MX_GPIO_Init+0xbc>)
 80008c6:	f000 fd3b 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0xbc>)
 80008e4:	f000 fb90 	bl	8001008 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020c00 	.word	0x40020c00

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000942:	2007      	movs	r0, #7
 8000944:	f000 fb2c 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a5b      	ldr	r2, [pc, #364]	; (8000ae0 <HAL_UART_MspInit+0x18c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12c      	bne.n	80009d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
 800097a:	4b5a      	ldr	r3, [pc, #360]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a59      	ldr	r2, [pc, #356]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800098e:	623b      	str	r3, [r7, #32]
 8000990:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ae:	2303      	movs	r3, #3
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009be:	2308      	movs	r3, #8
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <HAL_UART_MspInit+0x194>)
 80009ca:	f000 fb1d 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009ce:	e082      	b.n	8000ad6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==UART5)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a45      	ldr	r2, [pc, #276]	; (8000aec <HAL_UART_MspInit+0x198>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d14b      	bne.n	8000a72 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a40      	ldr	r2, [pc, #256]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 80009e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a39      	ldr	r2, [pc, #228]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a32      	ldr	r2, [pc, #200]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a40:	2308      	movs	r3, #8
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4829      	ldr	r0, [pc, #164]	; (8000af0 <HAL_UART_MspInit+0x19c>)
 8000a4c:	f000 fadc 	bl	8001008 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a60:	2308      	movs	r3, #8
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4822      	ldr	r0, [pc, #136]	; (8000af4 <HAL_UART_MspInit+0x1a0>)
 8000a6c:	f000 facc 	bl	8001008 <HAL_GPIO_Init>
}
 8000a70:	e031      	b.n	8000ad6 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <HAL_UART_MspInit+0x1a4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d12c      	bne.n	8000ad6 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a90:	f003 0310 	and.w	r3, r3, #16
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_UART_MspInit+0x190>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0x194>)
 8000ad2:	f000 fa99 	bl	8001008 <HAL_GPIO_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40004c00 	.word	0x40004c00
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40005000 	.word	0x40005000
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40011000 	.word	0x40011000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f934 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
  }

  return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
  }
  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f001 fc86 	bl	800256c <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000198 	.word	0x20000198
 8000c94:	200001b0 	.word	0x200001b0

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f001 fc45 	bl	8002578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc49 	bl	8000584 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d00:	080037a8 	.word	0x080037a8
  ldr r2, =_sbss
 8000d04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d08:	200001b0 	.word	0x200001b0

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f931 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fdde 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f93b 	bl	8000fee <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f911 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	2000019c 	.word	0x2000019c

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000019c 	.word	0x2000019c

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff47 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff5c 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffb0 	bl	8000f5c <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e16b      	b.n	80012fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 815a 	bne.w	80012f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	2b02      	cmp	r3, #2
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80b4 	beq.w	80012f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a5f      	ldr	r2, [pc, #380]	; (8001314 <HAL_GPIO_Init+0x30c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_GPIO_Init+0x310>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x314>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d02b      	beq.n	800122e <HAL_GPIO_Init+0x226>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a51      	ldr	r2, [pc, #324]	; (8001320 <HAL_GPIO_Init+0x318>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x222>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_GPIO_Init+0x31c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x21e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x320>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4e      	ldr	r2, [pc, #312]	; (800132c <HAL_GPIO_Init+0x324>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x216>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <HAL_GPIO_Init+0x328>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x212>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <HAL_GPIO_Init+0x32c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x20e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4b      	ldr	r2, [pc, #300]	; (8001338 <HAL_GPIO_Init+0x330>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x20a>
 800120e:	2307      	movs	r3, #7
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001212:	2308      	movs	r3, #8
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x228>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x228>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	; (8001318 <HAL_GPIO_Init+0x310>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_GPIO_Init+0x334>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b30      	ldr	r3, [pc, #192]	; (800133c <HAL_GPIO_Init+0x334>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_GPIO_Init+0x334>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_GPIO_Init+0x334>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_GPIO_Init+0x334>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_GPIO_Init+0x334>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae90 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e267      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d075      	beq.n	800147e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001392:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b04      	cmp	r3, #4
 800139c:	d00c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d112      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013b6:	d10b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05b      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d157      	bne.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e242      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d106      	bne.n	80013e8 <HAL_RCC_OscConfig+0x74>
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a75      	ldr	r2, [pc, #468]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6c      	ldr	r2, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a68      	ldr	r2, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fcd6 	bl	8000ddc <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fcd2 	bl	8000ddc <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e207      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xc0>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fcc2 	bl	8000ddc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fcbe 	bl	8000ddc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1f3      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c7      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4937      	ldr	r1, [pc, #220]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b34      	ldr	r3, [pc, #208]	; (80015b8 <HAL_RCC_OscConfig+0x244>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc77 	bl	8000ddc <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc73 	bl	8000ddc <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a8      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4925      	ldr	r1, [pc, #148]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x244>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc56 	bl	8000ddc <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc52 	bl	8000ddc <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e187      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d036      	beq.n	80015cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x248>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fc36 	bl	8000ddc <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fc32 	bl	8000ddc <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e167      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x200>
 8001592:	e01b      	b.n	80015cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x248>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fc1f 	bl	8000ddc <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e00e      	b.n	80015c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fc1b 	bl	8000ddc <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d907      	bls.n	80015c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e150      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	42470000 	.word	0x42470000
 80015bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ea      	bne.n	80015a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8097 	beq.w	8001708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b7d      	ldr	r3, [pc, #500]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a73      	ldr	r2, [pc, #460]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbdb 	bl	8000ddc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fbd7 	bl	8000ddc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e10c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x474>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x2ea>
 8001650:	4b64      	ldr	r3, [pc, #400]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	4a63      	ldr	r2, [pc, #396]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	; 0x70
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x30c>
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6713      	str	r3, [r2, #112]	; 0x70
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b55      	ldr	r3, [pc, #340]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d015      	beq.n	80016cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb9c 	bl	8000ddc <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff fb98 	bl	8000ddc <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0cb      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ee      	beq.n	80016a8 <HAL_RCC_OscConfig+0x334>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb86 	bl	8000ddc <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb82 	bl	8000ddc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0b5      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a1 	beq.w	8001854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d05c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d141      	bne.n	80017aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb56 	bl	8000ddc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fb52 	bl	8000ddc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e087      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb2b 	bl	8000ddc <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb27 	bl	8000ddc <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e05c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x416>
 80017a8:	e054      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb14 	bl	8000ddc <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fb10 	bl	8000ddc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e045      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x444>
 80017d6:	e03d      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e038      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000
 80017ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x4ec>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d028      	beq.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d121      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001820:	4013      	ands	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001828:	4293      	cmp	r3, r2
 800182a:	d111      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	3b01      	subs	r3, #1
 800183a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0cc      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d90c      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d044      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e067      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4934      	ldr	r1, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa42 	bl	8000ddc <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa3e 	bl	8000ddc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e04f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d20c      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9a2 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	080036e8 	.word	0x080036e8
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a34:	b094      	sub	sp, #80	; 0x50
 8001a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a48:	4b79      	ldr	r3, [pc, #484]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d00d      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f200 80e1 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e0db      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a68:	e0db      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a6e:	e0d8      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0159      	lsls	r1, r3, #5
 8001ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab4:	0150      	lsls	r0, r2, #5
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4621      	mov	r1, r4
 8001abc:	1a51      	subs	r1, r2, r1
 8001abe:	6139      	str	r1, [r7, #16]
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ade:	4651      	mov	r1, sl
 8001ae0:	018a      	lsls	r2, r1, #6
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae8:	4659      	mov	r1, fp
 8001aea:	eb63 0901 	sbc.w	r9, r3, r1
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	eb18 0303 	adds.w	r3, r8, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	eb49 0303 	adc.w	r3, r9, r3
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b22:	4629      	mov	r1, r5
 8001b24:	024b      	lsls	r3, r1, #9
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	024a      	lsls	r2, r1, #9
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b40:	f7fe fb9e 	bl	8000280 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b4c:	e058      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	4611      	mov	r1, r2
 8001b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	f04f 0000 	mov.w	r0, #0
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	0159      	lsls	r1, r3, #5
 8001b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7a:	0150      	lsls	r0, r2, #5
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4641      	mov	r1, r8
 8001b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b86:	4649      	mov	r1, r9
 8001b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	00eb      	lsls	r3, r5, #3
 8001bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb6:	00e2      	lsls	r2, r4, #3
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	18e3      	adds	r3, r4, r3
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	eb45 0303 	adc.w	r3, r5, r3
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	028b      	lsls	r3, r1, #10
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be0:	4621      	mov	r1, r4
 8001be2:	028a      	lsls	r2, r1, #10
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fb44 	bl	8000280 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3750      	adds	r7, #80	; 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	080036f8 	.word	0x080036f8

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffdc 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0b5b      	lsrs	r3, r3, #13
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	080036f8 	.word	0x080036f8

08001ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e03f      	b.n	8001d36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fe42 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f9cb 	bl	8002084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b08a      	sub	sp, #40	; 0x28
 8001d42:	af02      	add	r7, sp, #8
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d17c      	bne.n	8001e58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_UART_Transmit+0x2c>
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e075      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_UART_Transmit+0x3e>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e06e      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2221      	movs	r2, #33	; 0x21
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d92:	f7ff f823 	bl	8000ddc <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dac:	d108      	bne.n	8001dc0 <HAL_UART_Transmit+0x82>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d104      	bne.n	8001dc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e003      	b.n	8001dc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dd0:	e02a      	b.n	8001e28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f8e2 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e036      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3302      	adds	r3, #2
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	e007      	b.n	8001e1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1cf      	bne.n	8001dd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2140      	movs	r1, #64	; 0x40
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f8b2 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e006      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	; 0x28
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f040 808c 	bne.w	8001f9c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Receive+0x2e>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e084      	b.n	8001f9e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Receive+0x40>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e07d      	b.n	8001f9e <HAL_UART_Receive+0x13c>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2222      	movs	r2, #34	; 0x22
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe ff8d 	bl	8000ddc <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	88fa      	ldrh	r2, [r7, #6]
 8001ece:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed8:	d108      	bne.n	8001eec <HAL_UART_Receive+0x8a>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	e003      	b.n	8001ef4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001efc:	e043      	b.n	8001f86 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2120      	movs	r1, #32
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f84c 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e042      	b.n	8001f9e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	3302      	adds	r3, #2
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e01f      	b.n	8001f78 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f40:	d007      	beq.n	8001f52 <HAL_UART_Receive+0xf0>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_UART_Receive+0xfe>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	e008      	b.n	8001f72 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1b6      	bne.n	8001efe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b090      	sub	sp, #64	; 0x40
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb6:	e050      	b.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d04c      	beq.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fc6:	f7fe ff09 	bl	8000ddc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d241      	bcs.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	e853 3f00 	ldrex	r3, [r3]
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e5      	bne.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	613b      	str	r3, [r7, #16]
   return(result);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3314      	adds	r3, #20
 8002028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800202a:	623a      	str	r2, [r7, #32]
 800202c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	69f9      	ldr	r1, [r7, #28]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	61bb      	str	r3, [r7, #24]
   return(result);
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e5      	bne.n	800200a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e00f      	b.n	800207a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	429a      	cmp	r2, r3
 8002076:	d09f      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3740      	adds	r7, #64	; 0x40
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002088:	b0c0      	sub	sp, #256	; 0x100
 800208a:	af00      	add	r7, sp, #0
 800208c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a0:	68d9      	ldr	r1, [r3, #12]
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	ea40 0301 	orr.w	r3, r0, r1
 80020ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020dc:	f021 010c 	bic.w	r1, r1, #12
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020ea:	430b      	orrs	r3, r1
 80020ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fe:	6999      	ldr	r1, [r3, #24]
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	ea40 0301 	orr.w	r3, r0, r1
 800210a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <UART_SetConfig+0x2cc>)
 8002114:	429a      	cmp	r2, r3
 8002116:	d005      	beq.n	8002124 <UART_SetConfig+0xa0>
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b8d      	ldr	r3, [pc, #564]	; (8002354 <UART_SetConfig+0x2d0>)
 8002120:	429a      	cmp	r2, r3
 8002122:	d104      	bne.n	800212e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002124:	f7ff fdaa 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002128:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800212c:	e003      	b.n	8002136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800212e:	f7ff fd91 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002132:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002140:	f040 810c 	bne.w	800235c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002148:	2200      	movs	r2, #0
 800214a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800214e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002156:	4622      	mov	r2, r4
 8002158:	462b      	mov	r3, r5
 800215a:	1891      	adds	r1, r2, r2
 800215c:	65b9      	str	r1, [r7, #88]	; 0x58
 800215e:	415b      	adcs	r3, r3
 8002160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002166:	4621      	mov	r1, r4
 8002168:	eb12 0801 	adds.w	r8, r2, r1
 800216c:	4629      	mov	r1, r5
 800216e:	eb43 0901 	adc.w	r9, r3, r1
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800217e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002186:	4690      	mov	r8, r2
 8002188:	4699      	mov	r9, r3
 800218a:	4623      	mov	r3, r4
 800218c:	eb18 0303 	adds.w	r3, r8, r3
 8002190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002194:	462b      	mov	r3, r5
 8002196:	eb49 0303 	adc.w	r3, r9, r3
 800219a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800219e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021b2:	460b      	mov	r3, r1
 80021b4:	18db      	adds	r3, r3, r3
 80021b6:	653b      	str	r3, [r7, #80]	; 0x50
 80021b8:	4613      	mov	r3, r2
 80021ba:	eb42 0303 	adc.w	r3, r2, r3
 80021be:	657b      	str	r3, [r7, #84]	; 0x54
 80021c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021c8:	f7fe f85a 	bl	8000280 <__aeabi_uldivmod>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4b61      	ldr	r3, [pc, #388]	; (8002358 <UART_SetConfig+0x2d4>)
 80021d2:	fba3 2302 	umull	r2, r3, r3, r2
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	011c      	lsls	r4, r3, #4
 80021da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021ec:	4642      	mov	r2, r8
 80021ee:	464b      	mov	r3, r9
 80021f0:	1891      	adds	r1, r2, r2
 80021f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80021f4:	415b      	adcs	r3, r3
 80021f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021fc:	4641      	mov	r1, r8
 80021fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002202:	4649      	mov	r1, r9
 8002204:	eb43 0b01 	adc.w	fp, r3, r1
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800221c:	4692      	mov	sl, r2
 800221e:	469b      	mov	fp, r3
 8002220:	4643      	mov	r3, r8
 8002222:	eb1a 0303 	adds.w	r3, sl, r3
 8002226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800222a:	464b      	mov	r3, r9
 800222c:	eb4b 0303 	adc.w	r3, fp, r3
 8002230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002240:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002248:	460b      	mov	r3, r1
 800224a:	18db      	adds	r3, r3, r3
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
 800224e:	4613      	mov	r3, r2
 8002250:	eb42 0303 	adc.w	r3, r2, r3
 8002254:	647b      	str	r3, [r7, #68]	; 0x44
 8002256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800225a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800225e:	f7fe f80f 	bl	8000280 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4611      	mov	r1, r2
 8002268:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <UART_SetConfig+0x2d4>)
 800226a:	fba3 2301 	umull	r2, r3, r3, r1
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2264      	movs	r2, #100	; 0x64
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	1acb      	subs	r3, r1, r3
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800227e:	4b36      	ldr	r3, [pc, #216]	; (8002358 <UART_SetConfig+0x2d4>)
 8002280:	fba3 2302 	umull	r2, r3, r3, r2
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800228c:	441c      	add	r4, r3
 800228e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002292:	2200      	movs	r2, #0
 8002294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002298:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800229c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022a0:	4642      	mov	r2, r8
 80022a2:	464b      	mov	r3, r9
 80022a4:	1891      	adds	r1, r2, r2
 80022a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80022a8:	415b      	adcs	r3, r3
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022b0:	4641      	mov	r1, r8
 80022b2:	1851      	adds	r1, r2, r1
 80022b4:	6339      	str	r1, [r7, #48]	; 0x30
 80022b6:	4649      	mov	r1, r9
 80022b8:	414b      	adcs	r3, r1
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022c8:	4659      	mov	r1, fp
 80022ca:	00cb      	lsls	r3, r1, #3
 80022cc:	4651      	mov	r1, sl
 80022ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022d2:	4651      	mov	r1, sl
 80022d4:	00ca      	lsls	r2, r1, #3
 80022d6:	4610      	mov	r0, r2
 80022d8:	4619      	mov	r1, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	4642      	mov	r2, r8
 80022de:	189b      	adds	r3, r3, r2
 80022e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022e4:	464b      	mov	r3, r9
 80022e6:	460a      	mov	r2, r1
 80022e8:	eb42 0303 	adc.w	r3, r2, r3
 80022ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002304:	460b      	mov	r3, r1
 8002306:	18db      	adds	r3, r3, r3
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
 800230a:	4613      	mov	r3, r2
 800230c:	eb42 0303 	adc.w	r3, r2, r3
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800231a:	f7fd ffb1 	bl	8000280 <__aeabi_uldivmod>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <UART_SetConfig+0x2d4>)
 8002324:	fba3 1302 	umull	r1, r3, r3, r2
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	2164      	movs	r1, #100	; 0x64
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	3332      	adds	r3, #50	; 0x32
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <UART_SetConfig+0x2d4>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	f003 0207 	and.w	r2, r3, #7
 8002342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4422      	add	r2, r4
 800234a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800234c:	e105      	b.n	800255a <UART_SetConfig+0x4d6>
 800234e:	bf00      	nop
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800235c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002360:	2200      	movs	r2, #0
 8002362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002366:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800236a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800236e:	4642      	mov	r2, r8
 8002370:	464b      	mov	r3, r9
 8002372:	1891      	adds	r1, r2, r2
 8002374:	6239      	str	r1, [r7, #32]
 8002376:	415b      	adcs	r3, r3
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800237e:	4641      	mov	r1, r8
 8002380:	1854      	adds	r4, r2, r1
 8002382:	4649      	mov	r1, r9
 8002384:	eb43 0501 	adc.w	r5, r3, r1
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	00eb      	lsls	r3, r5, #3
 8002392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002396:	00e2      	lsls	r2, r4, #3
 8002398:	4614      	mov	r4, r2
 800239a:	461d      	mov	r5, r3
 800239c:	4643      	mov	r3, r8
 800239e:	18e3      	adds	r3, r4, r3
 80023a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023a4:	464b      	mov	r3, r9
 80023a6:	eb45 0303 	adc.w	r3, r5, r3
 80023aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023ca:	4629      	mov	r1, r5
 80023cc:	008b      	lsls	r3, r1, #2
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023d4:	4621      	mov	r1, r4
 80023d6:	008a      	lsls	r2, r1, #2
 80023d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023dc:	f7fd ff50 	bl	8000280 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <UART_SetConfig+0x4e4>)
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	011c      	lsls	r4, r3, #4
 80023ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	1891      	adds	r1, r2, r2
 8002406:	61b9      	str	r1, [r7, #24]
 8002408:	415b      	adcs	r3, r3
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002410:	4641      	mov	r1, r8
 8002412:	1851      	adds	r1, r2, r1
 8002414:	6139      	str	r1, [r7, #16]
 8002416:	4649      	mov	r1, r9
 8002418:	414b      	adcs	r3, r1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002428:	4659      	mov	r1, fp
 800242a:	00cb      	lsls	r3, r1, #3
 800242c:	4651      	mov	r1, sl
 800242e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002432:	4651      	mov	r1, sl
 8002434:	00ca      	lsls	r2, r1, #3
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	4603      	mov	r3, r0
 800243c:	4642      	mov	r2, r8
 800243e:	189b      	adds	r3, r3, r2
 8002440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002444:	464b      	mov	r3, r9
 8002446:	460a      	mov	r2, r1
 8002448:	eb42 0303 	adc.w	r3, r2, r3
 800244c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	67bb      	str	r3, [r7, #120]	; 0x78
 800245a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002468:	4649      	mov	r1, r9
 800246a:	008b      	lsls	r3, r1, #2
 800246c:	4641      	mov	r1, r8
 800246e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002472:	4641      	mov	r1, r8
 8002474:	008a      	lsls	r2, r1, #2
 8002476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800247a:	f7fd ff01 	bl	8000280 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <UART_SetConfig+0x4e4>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	3332      	adds	r3, #50	; 0x32
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <UART_SetConfig+0x4e4>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a2:	441c      	add	r4, r3
 80024a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a8:	2200      	movs	r2, #0
 80024aa:	673b      	str	r3, [r7, #112]	; 0x70
 80024ac:	677a      	str	r2, [r7, #116]	; 0x74
 80024ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024b2:	4642      	mov	r2, r8
 80024b4:	464b      	mov	r3, r9
 80024b6:	1891      	adds	r1, r2, r2
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	415b      	adcs	r3, r3
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024c2:	4641      	mov	r1, r8
 80024c4:	1851      	adds	r1, r2, r1
 80024c6:	6039      	str	r1, [r7, #0]
 80024c8:	4649      	mov	r1, r9
 80024ca:	414b      	adcs	r3, r1
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024da:	4659      	mov	r1, fp
 80024dc:	00cb      	lsls	r3, r1, #3
 80024de:	4651      	mov	r1, sl
 80024e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024e4:	4651      	mov	r1, sl
 80024e6:	00ca      	lsls	r2, r1, #3
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	4603      	mov	r3, r0
 80024ee:	4642      	mov	r2, r8
 80024f0:	189b      	adds	r3, r3, r2
 80024f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80024f4:	464b      	mov	r3, r9
 80024f6:	460a      	mov	r2, r1
 80024f8:	eb42 0303 	adc.w	r3, r2, r3
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	663b      	str	r3, [r7, #96]	; 0x60
 8002508:	667a      	str	r2, [r7, #100]	; 0x64
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002516:	4649      	mov	r1, r9
 8002518:	008b      	lsls	r3, r1, #2
 800251a:	4641      	mov	r1, r8
 800251c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002520:	4641      	mov	r1, r8
 8002522:	008a      	lsls	r2, r1, #2
 8002524:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002528:	f7fd feaa 	bl	8000280 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <UART_SetConfig+0x4e4>)
 8002532:	fba3 1302 	umull	r1, r3, r3, r2
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2164      	movs	r1, #100	; 0x64
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	3332      	adds	r3, #50	; 0x32
 8002544:	4a08      	ldr	r2, [pc, #32]	; (8002568 <UART_SetConfig+0x4e4>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4422      	add	r2, r4
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	bf00      	nop
 800255c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002566:	bf00      	nop
 8002568:	51eb851f 	.word	0x51eb851f

0800256c <__errno>:
 800256c:	4b01      	ldr	r3, [pc, #4]	; (8002574 <__errno+0x8>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	2000000c 	.word	0x2000000c

08002578 <__libc_init_array>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	4d0d      	ldr	r5, [pc, #52]	; (80025b0 <__libc_init_array+0x38>)
 800257c:	4c0d      	ldr	r4, [pc, #52]	; (80025b4 <__libc_init_array+0x3c>)
 800257e:	1b64      	subs	r4, r4, r5
 8002580:	10a4      	asrs	r4, r4, #2
 8002582:	2600      	movs	r6, #0
 8002584:	42a6      	cmp	r6, r4
 8002586:	d109      	bne.n	800259c <__libc_init_array+0x24>
 8002588:	4d0b      	ldr	r5, [pc, #44]	; (80025b8 <__libc_init_array+0x40>)
 800258a:	4c0c      	ldr	r4, [pc, #48]	; (80025bc <__libc_init_array+0x44>)
 800258c:	f001 f876 	bl	800367c <_init>
 8002590:	1b64      	subs	r4, r4, r5
 8002592:	10a4      	asrs	r4, r4, #2
 8002594:	2600      	movs	r6, #0
 8002596:	42a6      	cmp	r6, r4
 8002598:	d105      	bne.n	80025a6 <__libc_init_array+0x2e>
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a0:	4798      	blx	r3
 80025a2:	3601      	adds	r6, #1
 80025a4:	e7ee      	b.n	8002584 <__libc_init_array+0xc>
 80025a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025aa:	4798      	blx	r3
 80025ac:	3601      	adds	r6, #1
 80025ae:	e7f2      	b.n	8002596 <__libc_init_array+0x1e>
 80025b0:	080037a0 	.word	0x080037a0
 80025b4:	080037a0 	.word	0x080037a0
 80025b8:	080037a0 	.word	0x080037a0
 80025bc:	080037a4 	.word	0x080037a4

080025c0 <memset>:
 80025c0:	4402      	add	r2, r0
 80025c2:	4603      	mov	r3, r0
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d100      	bne.n	80025ca <memset+0xa>
 80025c8:	4770      	bx	lr
 80025ca:	f803 1b01 	strb.w	r1, [r3], #1
 80025ce:	e7f9      	b.n	80025c4 <memset+0x4>

080025d0 <putchar>:
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <putchar+0x28>)
 80025d2:	b513      	push	{r0, r1, r4, lr}
 80025d4:	681c      	ldr	r4, [r3, #0]
 80025d6:	4601      	mov	r1, r0
 80025d8:	b134      	cbz	r4, 80025e8 <putchar+0x18>
 80025da:	69a3      	ldr	r3, [r4, #24]
 80025dc:	b923      	cbnz	r3, 80025e8 <putchar+0x18>
 80025de:	9001      	str	r0, [sp, #4]
 80025e0:	4620      	mov	r0, r4
 80025e2:	f000 f883 	bl	80026ec <__sinit>
 80025e6:	9901      	ldr	r1, [sp, #4]
 80025e8:	68a2      	ldr	r2, [r4, #8]
 80025ea:	4620      	mov	r0, r4
 80025ec:	b002      	add	sp, #8
 80025ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f2:	f000 bc9f 	b.w	8002f34 <_putc_r>
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c

080025fc <siprintf>:
 80025fc:	b40e      	push	{r1, r2, r3}
 80025fe:	b500      	push	{lr}
 8002600:	b09c      	sub	sp, #112	; 0x70
 8002602:	ab1d      	add	r3, sp, #116	; 0x74
 8002604:	9002      	str	r0, [sp, #8]
 8002606:	9006      	str	r0, [sp, #24]
 8002608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800260c:	4809      	ldr	r0, [pc, #36]	; (8002634 <siprintf+0x38>)
 800260e:	9107      	str	r1, [sp, #28]
 8002610:	9104      	str	r1, [sp, #16]
 8002612:	4909      	ldr	r1, [pc, #36]	; (8002638 <siprintf+0x3c>)
 8002614:	f853 2b04 	ldr.w	r2, [r3], #4
 8002618:	9105      	str	r1, [sp, #20]
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	a902      	add	r1, sp, #8
 8002620:	f000 f9f4 	bl	8002a0c <_svfiprintf_r>
 8002624:	9b02      	ldr	r3, [sp, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	b01c      	add	sp, #112	; 0x70
 800262c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002630:	b003      	add	sp, #12
 8002632:	4770      	bx	lr
 8002634:	2000000c 	.word	0x2000000c
 8002638:	ffff0208 	.word	0xffff0208

0800263c <std>:
 800263c:	2300      	movs	r3, #0
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
 8002642:	e9c0 3300 	strd	r3, r3, [r0]
 8002646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800264a:	6083      	str	r3, [r0, #8]
 800264c:	8181      	strh	r1, [r0, #12]
 800264e:	6643      	str	r3, [r0, #100]	; 0x64
 8002650:	81c2      	strh	r2, [r0, #14]
 8002652:	6183      	str	r3, [r0, #24]
 8002654:	4619      	mov	r1, r3
 8002656:	2208      	movs	r2, #8
 8002658:	305c      	adds	r0, #92	; 0x5c
 800265a:	f7ff ffb1 	bl	80025c0 <memset>
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <std+0x38>)
 8002660:	6263      	str	r3, [r4, #36]	; 0x24
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <std+0x3c>)
 8002664:	62a3      	str	r3, [r4, #40]	; 0x28
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <std+0x40>)
 8002668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <std+0x44>)
 800266c:	6224      	str	r4, [r4, #32]
 800266e:	6323      	str	r3, [r4, #48]	; 0x30
 8002670:	bd10      	pop	{r4, pc}
 8002672:	bf00      	nop
 8002674:	08002fe5 	.word	0x08002fe5
 8002678:	08003007 	.word	0x08003007
 800267c:	0800303f 	.word	0x0800303f
 8002680:	08003063 	.word	0x08003063

08002684 <_cleanup_r>:
 8002684:	4901      	ldr	r1, [pc, #4]	; (800268c <_cleanup_r+0x8>)
 8002686:	f000 b8af 	b.w	80027e8 <_fwalk_reent>
 800268a:	bf00      	nop
 800268c:	0800333d 	.word	0x0800333d

08002690 <__sfmoreglue>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	2268      	movs	r2, #104	; 0x68
 8002694:	1e4d      	subs	r5, r1, #1
 8002696:	4355      	muls	r5, r2
 8002698:	460e      	mov	r6, r1
 800269a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800269e:	f000 f8e5 	bl	800286c <_malloc_r>
 80026a2:	4604      	mov	r4, r0
 80026a4:	b140      	cbz	r0, 80026b8 <__sfmoreglue+0x28>
 80026a6:	2100      	movs	r1, #0
 80026a8:	e9c0 1600 	strd	r1, r6, [r0]
 80026ac:	300c      	adds	r0, #12
 80026ae:	60a0      	str	r0, [r4, #8]
 80026b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026b4:	f7ff ff84 	bl	80025c0 <memset>
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd70      	pop	{r4, r5, r6, pc}

080026bc <__sfp_lock_acquire>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__sfp_lock_acquire+0x8>)
 80026be:	f000 b8b3 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80026c2:	bf00      	nop
 80026c4:	200001a1 	.word	0x200001a1

080026c8 <__sfp_lock_release>:
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <__sfp_lock_release+0x8>)
 80026ca:	f000 b8ae 	b.w	800282a <__retarget_lock_release_recursive>
 80026ce:	bf00      	nop
 80026d0:	200001a1 	.word	0x200001a1

080026d4 <__sinit_lock_acquire>:
 80026d4:	4801      	ldr	r0, [pc, #4]	; (80026dc <__sinit_lock_acquire+0x8>)
 80026d6:	f000 b8a7 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80026da:	bf00      	nop
 80026dc:	200001a2 	.word	0x200001a2

080026e0 <__sinit_lock_release>:
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <__sinit_lock_release+0x8>)
 80026e2:	f000 b8a2 	b.w	800282a <__retarget_lock_release_recursive>
 80026e6:	bf00      	nop
 80026e8:	200001a2 	.word	0x200001a2

080026ec <__sinit>:
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
 80026f0:	f7ff fff0 	bl	80026d4 <__sinit_lock_acquire>
 80026f4:	69a3      	ldr	r3, [r4, #24]
 80026f6:	b11b      	cbz	r3, 8002700 <__sinit+0x14>
 80026f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fc:	f7ff bff0 	b.w	80026e0 <__sinit_lock_release>
 8002700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002704:	6523      	str	r3, [r4, #80]	; 0x50
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <__sinit+0x68>)
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <__sinit+0x6c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	62a2      	str	r2, [r4, #40]	; 0x28
 800270e:	42a3      	cmp	r3, r4
 8002710:	bf04      	itt	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	61a3      	streq	r3, [r4, #24]
 8002716:	4620      	mov	r0, r4
 8002718:	f000 f820 	bl	800275c <__sfp>
 800271c:	6060      	str	r0, [r4, #4]
 800271e:	4620      	mov	r0, r4
 8002720:	f000 f81c 	bl	800275c <__sfp>
 8002724:	60a0      	str	r0, [r4, #8]
 8002726:	4620      	mov	r0, r4
 8002728:	f000 f818 	bl	800275c <__sfp>
 800272c:	2200      	movs	r2, #0
 800272e:	60e0      	str	r0, [r4, #12]
 8002730:	2104      	movs	r1, #4
 8002732:	6860      	ldr	r0, [r4, #4]
 8002734:	f7ff ff82 	bl	800263c <std>
 8002738:	68a0      	ldr	r0, [r4, #8]
 800273a:	2201      	movs	r2, #1
 800273c:	2109      	movs	r1, #9
 800273e:	f7ff ff7d 	bl	800263c <std>
 8002742:	68e0      	ldr	r0, [r4, #12]
 8002744:	2202      	movs	r2, #2
 8002746:	2112      	movs	r1, #18
 8002748:	f7ff ff78 	bl	800263c <std>
 800274c:	2301      	movs	r3, #1
 800274e:	61a3      	str	r3, [r4, #24]
 8002750:	e7d2      	b.n	80026f8 <__sinit+0xc>
 8002752:	bf00      	nop
 8002754:	08003700 	.word	0x08003700
 8002758:	08002685 	.word	0x08002685

0800275c <__sfp>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	4607      	mov	r7, r0
 8002760:	f7ff ffac 	bl	80026bc <__sfp_lock_acquire>
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <__sfp+0x84>)
 8002766:	681e      	ldr	r6, [r3, #0]
 8002768:	69b3      	ldr	r3, [r6, #24]
 800276a:	b913      	cbnz	r3, 8002772 <__sfp+0x16>
 800276c:	4630      	mov	r0, r6
 800276e:	f7ff ffbd 	bl	80026ec <__sinit>
 8002772:	3648      	adds	r6, #72	; 0x48
 8002774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002778:	3b01      	subs	r3, #1
 800277a:	d503      	bpl.n	8002784 <__sfp+0x28>
 800277c:	6833      	ldr	r3, [r6, #0]
 800277e:	b30b      	cbz	r3, 80027c4 <__sfp+0x68>
 8002780:	6836      	ldr	r6, [r6, #0]
 8002782:	e7f7      	b.n	8002774 <__sfp+0x18>
 8002784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002788:	b9d5      	cbnz	r5, 80027c0 <__sfp+0x64>
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <__sfp+0x88>)
 800278c:	60e3      	str	r3, [r4, #12]
 800278e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002792:	6665      	str	r5, [r4, #100]	; 0x64
 8002794:	f000 f847 	bl	8002826 <__retarget_lock_init_recursive>
 8002798:	f7ff ff96 	bl	80026c8 <__sfp_lock_release>
 800279c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027a4:	6025      	str	r5, [r4, #0]
 80027a6:	61a5      	str	r5, [r4, #24]
 80027a8:	2208      	movs	r2, #8
 80027aa:	4629      	mov	r1, r5
 80027ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027b0:	f7ff ff06 	bl	80025c0 <memset>
 80027b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027bc:	4620      	mov	r0, r4
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c0:	3468      	adds	r4, #104	; 0x68
 80027c2:	e7d9      	b.n	8002778 <__sfp+0x1c>
 80027c4:	2104      	movs	r1, #4
 80027c6:	4638      	mov	r0, r7
 80027c8:	f7ff ff62 	bl	8002690 <__sfmoreglue>
 80027cc:	4604      	mov	r4, r0
 80027ce:	6030      	str	r0, [r6, #0]
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d1d5      	bne.n	8002780 <__sfp+0x24>
 80027d4:	f7ff ff78 	bl	80026c8 <__sfp_lock_release>
 80027d8:	230c      	movs	r3, #12
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	e7ee      	b.n	80027bc <__sfp+0x60>
 80027de:	bf00      	nop
 80027e0:	08003700 	.word	0x08003700
 80027e4:	ffff0001 	.word	0xffff0001

080027e8 <_fwalk_reent>:
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	4606      	mov	r6, r0
 80027ee:	4688      	mov	r8, r1
 80027f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027f4:	2700      	movs	r7, #0
 80027f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027fa:	f1b9 0901 	subs.w	r9, r9, #1
 80027fe:	d505      	bpl.n	800280c <_fwalk_reent+0x24>
 8002800:	6824      	ldr	r4, [r4, #0]
 8002802:	2c00      	cmp	r4, #0
 8002804:	d1f7      	bne.n	80027f6 <_fwalk_reent+0xe>
 8002806:	4638      	mov	r0, r7
 8002808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280c:	89ab      	ldrh	r3, [r5, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d907      	bls.n	8002822 <_fwalk_reent+0x3a>
 8002812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002816:	3301      	adds	r3, #1
 8002818:	d003      	beq.n	8002822 <_fwalk_reent+0x3a>
 800281a:	4629      	mov	r1, r5
 800281c:	4630      	mov	r0, r6
 800281e:	47c0      	blx	r8
 8002820:	4307      	orrs	r7, r0
 8002822:	3568      	adds	r5, #104	; 0x68
 8002824:	e7e9      	b.n	80027fa <_fwalk_reent+0x12>

08002826 <__retarget_lock_init_recursive>:
 8002826:	4770      	bx	lr

08002828 <__retarget_lock_acquire_recursive>:
 8002828:	4770      	bx	lr

0800282a <__retarget_lock_release_recursive>:
 800282a:	4770      	bx	lr

0800282c <sbrk_aligned>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4e0e      	ldr	r6, [pc, #56]	; (8002868 <sbrk_aligned+0x3c>)
 8002830:	460c      	mov	r4, r1
 8002832:	6831      	ldr	r1, [r6, #0]
 8002834:	4605      	mov	r5, r0
 8002836:	b911      	cbnz	r1, 800283e <sbrk_aligned+0x12>
 8002838:	f000 fbc4 	bl	8002fc4 <_sbrk_r>
 800283c:	6030      	str	r0, [r6, #0]
 800283e:	4621      	mov	r1, r4
 8002840:	4628      	mov	r0, r5
 8002842:	f000 fbbf 	bl	8002fc4 <_sbrk_r>
 8002846:	1c43      	adds	r3, r0, #1
 8002848:	d00a      	beq.n	8002860 <sbrk_aligned+0x34>
 800284a:	1cc4      	adds	r4, r0, #3
 800284c:	f024 0403 	bic.w	r4, r4, #3
 8002850:	42a0      	cmp	r0, r4
 8002852:	d007      	beq.n	8002864 <sbrk_aligned+0x38>
 8002854:	1a21      	subs	r1, r4, r0
 8002856:	4628      	mov	r0, r5
 8002858:	f000 fbb4 	bl	8002fc4 <_sbrk_r>
 800285c:	3001      	adds	r0, #1
 800285e:	d101      	bne.n	8002864 <sbrk_aligned+0x38>
 8002860:	f04f 34ff 	mov.w	r4, #4294967295
 8002864:	4620      	mov	r0, r4
 8002866:	bd70      	pop	{r4, r5, r6, pc}
 8002868:	200001a8 	.word	0x200001a8

0800286c <_malloc_r>:
 800286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002870:	1ccd      	adds	r5, r1, #3
 8002872:	f025 0503 	bic.w	r5, r5, #3
 8002876:	3508      	adds	r5, #8
 8002878:	2d0c      	cmp	r5, #12
 800287a:	bf38      	it	cc
 800287c:	250c      	movcc	r5, #12
 800287e:	2d00      	cmp	r5, #0
 8002880:	4607      	mov	r7, r0
 8002882:	db01      	blt.n	8002888 <_malloc_r+0x1c>
 8002884:	42a9      	cmp	r1, r5
 8002886:	d905      	bls.n	8002894 <_malloc_r+0x28>
 8002888:	230c      	movs	r3, #12
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	2600      	movs	r6, #0
 800288e:	4630      	mov	r0, r6
 8002890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002894:	4e2e      	ldr	r6, [pc, #184]	; (8002950 <_malloc_r+0xe4>)
 8002896:	f000 fe2d 	bl	80034f4 <__malloc_lock>
 800289a:	6833      	ldr	r3, [r6, #0]
 800289c:	461c      	mov	r4, r3
 800289e:	bb34      	cbnz	r4, 80028ee <_malloc_r+0x82>
 80028a0:	4629      	mov	r1, r5
 80028a2:	4638      	mov	r0, r7
 80028a4:	f7ff ffc2 	bl	800282c <sbrk_aligned>
 80028a8:	1c43      	adds	r3, r0, #1
 80028aa:	4604      	mov	r4, r0
 80028ac:	d14d      	bne.n	800294a <_malloc_r+0xde>
 80028ae:	6834      	ldr	r4, [r6, #0]
 80028b0:	4626      	mov	r6, r4
 80028b2:	2e00      	cmp	r6, #0
 80028b4:	d140      	bne.n	8002938 <_malloc_r+0xcc>
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	4631      	mov	r1, r6
 80028ba:	4638      	mov	r0, r7
 80028bc:	eb04 0803 	add.w	r8, r4, r3
 80028c0:	f000 fb80 	bl	8002fc4 <_sbrk_r>
 80028c4:	4580      	cmp	r8, r0
 80028c6:	d13a      	bne.n	800293e <_malloc_r+0xd2>
 80028c8:	6821      	ldr	r1, [r4, #0]
 80028ca:	3503      	adds	r5, #3
 80028cc:	1a6d      	subs	r5, r5, r1
 80028ce:	f025 0503 	bic.w	r5, r5, #3
 80028d2:	3508      	adds	r5, #8
 80028d4:	2d0c      	cmp	r5, #12
 80028d6:	bf38      	it	cc
 80028d8:	250c      	movcc	r5, #12
 80028da:	4629      	mov	r1, r5
 80028dc:	4638      	mov	r0, r7
 80028de:	f7ff ffa5 	bl	800282c <sbrk_aligned>
 80028e2:	3001      	adds	r0, #1
 80028e4:	d02b      	beq.n	800293e <_malloc_r+0xd2>
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	442b      	add	r3, r5
 80028ea:	6023      	str	r3, [r4, #0]
 80028ec:	e00e      	b.n	800290c <_malloc_r+0xa0>
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	1b52      	subs	r2, r2, r5
 80028f2:	d41e      	bmi.n	8002932 <_malloc_r+0xc6>
 80028f4:	2a0b      	cmp	r2, #11
 80028f6:	d916      	bls.n	8002926 <_malloc_r+0xba>
 80028f8:	1961      	adds	r1, r4, r5
 80028fa:	42a3      	cmp	r3, r4
 80028fc:	6025      	str	r5, [r4, #0]
 80028fe:	bf18      	it	ne
 8002900:	6059      	strne	r1, [r3, #4]
 8002902:	6863      	ldr	r3, [r4, #4]
 8002904:	bf08      	it	eq
 8002906:	6031      	streq	r1, [r6, #0]
 8002908:	5162      	str	r2, [r4, r5]
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	4638      	mov	r0, r7
 800290e:	f104 060b 	add.w	r6, r4, #11
 8002912:	f000 fdf5 	bl	8003500 <__malloc_unlock>
 8002916:	f026 0607 	bic.w	r6, r6, #7
 800291a:	1d23      	adds	r3, r4, #4
 800291c:	1af2      	subs	r2, r6, r3
 800291e:	d0b6      	beq.n	800288e <_malloc_r+0x22>
 8002920:	1b9b      	subs	r3, r3, r6
 8002922:	50a3      	str	r3, [r4, r2]
 8002924:	e7b3      	b.n	800288e <_malloc_r+0x22>
 8002926:	6862      	ldr	r2, [r4, #4]
 8002928:	42a3      	cmp	r3, r4
 800292a:	bf0c      	ite	eq
 800292c:	6032      	streq	r2, [r6, #0]
 800292e:	605a      	strne	r2, [r3, #4]
 8002930:	e7ec      	b.n	800290c <_malloc_r+0xa0>
 8002932:	4623      	mov	r3, r4
 8002934:	6864      	ldr	r4, [r4, #4]
 8002936:	e7b2      	b.n	800289e <_malloc_r+0x32>
 8002938:	4634      	mov	r4, r6
 800293a:	6876      	ldr	r6, [r6, #4]
 800293c:	e7b9      	b.n	80028b2 <_malloc_r+0x46>
 800293e:	230c      	movs	r3, #12
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4638      	mov	r0, r7
 8002944:	f000 fddc 	bl	8003500 <__malloc_unlock>
 8002948:	e7a1      	b.n	800288e <_malloc_r+0x22>
 800294a:	6025      	str	r5, [r4, #0]
 800294c:	e7de      	b.n	800290c <_malloc_r+0xa0>
 800294e:	bf00      	nop
 8002950:	200001a4 	.word	0x200001a4

08002954 <__ssputs_r>:
 8002954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002958:	688e      	ldr	r6, [r1, #8]
 800295a:	429e      	cmp	r6, r3
 800295c:	4682      	mov	sl, r0
 800295e:	460c      	mov	r4, r1
 8002960:	4690      	mov	r8, r2
 8002962:	461f      	mov	r7, r3
 8002964:	d838      	bhi.n	80029d8 <__ssputs_r+0x84>
 8002966:	898a      	ldrh	r2, [r1, #12]
 8002968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800296c:	d032      	beq.n	80029d4 <__ssputs_r+0x80>
 800296e:	6825      	ldr	r5, [r4, #0]
 8002970:	6909      	ldr	r1, [r1, #16]
 8002972:	eba5 0901 	sub.w	r9, r5, r1
 8002976:	6965      	ldr	r5, [r4, #20]
 8002978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800297c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002980:	3301      	adds	r3, #1
 8002982:	444b      	add	r3, r9
 8002984:	106d      	asrs	r5, r5, #1
 8002986:	429d      	cmp	r5, r3
 8002988:	bf38      	it	cc
 800298a:	461d      	movcc	r5, r3
 800298c:	0553      	lsls	r3, r2, #21
 800298e:	d531      	bpl.n	80029f4 <__ssputs_r+0xa0>
 8002990:	4629      	mov	r1, r5
 8002992:	f7ff ff6b 	bl	800286c <_malloc_r>
 8002996:	4606      	mov	r6, r0
 8002998:	b950      	cbnz	r0, 80029b0 <__ssputs_r+0x5c>
 800299a:	230c      	movs	r3, #12
 800299c:	f8ca 3000 	str.w	r3, [sl]
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a6:	81a3      	strh	r3, [r4, #12]
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b0:	6921      	ldr	r1, [r4, #16]
 80029b2:	464a      	mov	r2, r9
 80029b4:	f000 fd76 	bl	80034a4 <memcpy>
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	81a3      	strh	r3, [r4, #12]
 80029c4:	6126      	str	r6, [r4, #16]
 80029c6:	6165      	str	r5, [r4, #20]
 80029c8:	444e      	add	r6, r9
 80029ca:	eba5 0509 	sub.w	r5, r5, r9
 80029ce:	6026      	str	r6, [r4, #0]
 80029d0:	60a5      	str	r5, [r4, #8]
 80029d2:	463e      	mov	r6, r7
 80029d4:	42be      	cmp	r6, r7
 80029d6:	d900      	bls.n	80029da <__ssputs_r+0x86>
 80029d8:	463e      	mov	r6, r7
 80029da:	6820      	ldr	r0, [r4, #0]
 80029dc:	4632      	mov	r2, r6
 80029de:	4641      	mov	r1, r8
 80029e0:	f000 fd6e 	bl	80034c0 <memmove>
 80029e4:	68a3      	ldr	r3, [r4, #8]
 80029e6:	1b9b      	subs	r3, r3, r6
 80029e8:	60a3      	str	r3, [r4, #8]
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	4433      	add	r3, r6
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	2000      	movs	r0, #0
 80029f2:	e7db      	b.n	80029ac <__ssputs_r+0x58>
 80029f4:	462a      	mov	r2, r5
 80029f6:	f000 fdd5 	bl	80035a4 <_realloc_r>
 80029fa:	4606      	mov	r6, r0
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d1e1      	bne.n	80029c4 <__ssputs_r+0x70>
 8002a00:	6921      	ldr	r1, [r4, #16]
 8002a02:	4650      	mov	r0, sl
 8002a04:	f000 fd82 	bl	800350c <_free_r>
 8002a08:	e7c7      	b.n	800299a <__ssputs_r+0x46>
	...

08002a0c <_svfiprintf_r>:
 8002a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a10:	4698      	mov	r8, r3
 8002a12:	898b      	ldrh	r3, [r1, #12]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	b09d      	sub	sp, #116	; 0x74
 8002a18:	4607      	mov	r7, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	d50e      	bpl.n	8002a3e <_svfiprintf_r+0x32>
 8002a20:	690b      	ldr	r3, [r1, #16]
 8002a22:	b963      	cbnz	r3, 8002a3e <_svfiprintf_r+0x32>
 8002a24:	2140      	movs	r1, #64	; 0x40
 8002a26:	f7ff ff21 	bl	800286c <_malloc_r>
 8002a2a:	6028      	str	r0, [r5, #0]
 8002a2c:	6128      	str	r0, [r5, #16]
 8002a2e:	b920      	cbnz	r0, 8002a3a <_svfiprintf_r+0x2e>
 8002a30:	230c      	movs	r3, #12
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	e0d1      	b.n	8002bde <_svfiprintf_r+0x1d2>
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	616b      	str	r3, [r5, #20]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9309      	str	r3, [sp, #36]	; 0x24
 8002a42:	2320      	movs	r3, #32
 8002a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a4c:	2330      	movs	r3, #48	; 0x30
 8002a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002bf8 <_svfiprintf_r+0x1ec>
 8002a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a56:	f04f 0901 	mov.w	r9, #1
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	469a      	mov	sl, r3
 8002a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a62:	b10a      	cbz	r2, 8002a68 <_svfiprintf_r+0x5c>
 8002a64:	2a25      	cmp	r2, #37	; 0x25
 8002a66:	d1f9      	bne.n	8002a5c <_svfiprintf_r+0x50>
 8002a68:	ebba 0b04 	subs.w	fp, sl, r4
 8002a6c:	d00b      	beq.n	8002a86 <_svfiprintf_r+0x7a>
 8002a6e:	465b      	mov	r3, fp
 8002a70:	4622      	mov	r2, r4
 8002a72:	4629      	mov	r1, r5
 8002a74:	4638      	mov	r0, r7
 8002a76:	f7ff ff6d 	bl	8002954 <__ssputs_r>
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	f000 80aa 	beq.w	8002bd4 <_svfiprintf_r+0x1c8>
 8002a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a82:	445a      	add	r2, fp
 8002a84:	9209      	str	r2, [sp, #36]	; 0x24
 8002a86:	f89a 3000 	ldrb.w	r3, [sl]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a2 	beq.w	8002bd4 <_svfiprintf_r+0x1c8>
 8002a90:	2300      	movs	r3, #0
 8002a92:	f04f 32ff 	mov.w	r2, #4294967295
 8002a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a9a:	f10a 0a01 	add.w	sl, sl, #1
 8002a9e:	9304      	str	r3, [sp, #16]
 8002aa0:	9307      	str	r3, [sp, #28]
 8002aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8002aa8:	4654      	mov	r4, sl
 8002aaa:	2205      	movs	r2, #5
 8002aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ab0:	4851      	ldr	r0, [pc, #324]	; (8002bf8 <_svfiprintf_r+0x1ec>)
 8002ab2:	f7fd fb95 	bl	80001e0 <memchr>
 8002ab6:	9a04      	ldr	r2, [sp, #16]
 8002ab8:	b9d8      	cbnz	r0, 8002af2 <_svfiprintf_r+0xe6>
 8002aba:	06d0      	lsls	r0, r2, #27
 8002abc:	bf44      	itt	mi
 8002abe:	2320      	movmi	r3, #32
 8002ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ac4:	0711      	lsls	r1, r2, #28
 8002ac6:	bf44      	itt	mi
 8002ac8:	232b      	movmi	r3, #43	; 0x2b
 8002aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ace:	f89a 3000 	ldrb.w	r3, [sl]
 8002ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad4:	d015      	beq.n	8002b02 <_svfiprintf_r+0xf6>
 8002ad6:	9a07      	ldr	r2, [sp, #28]
 8002ad8:	4654      	mov	r4, sl
 8002ada:	2000      	movs	r0, #0
 8002adc:	f04f 0c0a 	mov.w	ip, #10
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ae6:	3b30      	subs	r3, #48	; 0x30
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	d94e      	bls.n	8002b8a <_svfiprintf_r+0x17e>
 8002aec:	b1b0      	cbz	r0, 8002b1c <_svfiprintf_r+0x110>
 8002aee:	9207      	str	r2, [sp, #28]
 8002af0:	e014      	b.n	8002b1c <_svfiprintf_r+0x110>
 8002af2:	eba0 0308 	sub.w	r3, r0, r8
 8002af6:	fa09 f303 	lsl.w	r3, r9, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	9304      	str	r3, [sp, #16]
 8002afe:	46a2      	mov	sl, r4
 8002b00:	e7d2      	b.n	8002aa8 <_svfiprintf_r+0x9c>
 8002b02:	9b03      	ldr	r3, [sp, #12]
 8002b04:	1d19      	adds	r1, r3, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	9103      	str	r1, [sp, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bfbb      	ittet	lt
 8002b0e:	425b      	neglt	r3, r3
 8002b10:	f042 0202 	orrlt.w	r2, r2, #2
 8002b14:	9307      	strge	r3, [sp, #28]
 8002b16:	9307      	strlt	r3, [sp, #28]
 8002b18:	bfb8      	it	lt
 8002b1a:	9204      	strlt	r2, [sp, #16]
 8002b1c:	7823      	ldrb	r3, [r4, #0]
 8002b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b20:	d10c      	bne.n	8002b3c <_svfiprintf_r+0x130>
 8002b22:	7863      	ldrb	r3, [r4, #1]
 8002b24:	2b2a      	cmp	r3, #42	; 0x2a
 8002b26:	d135      	bne.n	8002b94 <_svfiprintf_r+0x188>
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	9203      	str	r2, [sp, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bfb8      	it	lt
 8002b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b38:	3402      	adds	r4, #2
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c08 <_svfiprintf_r+0x1fc>
 8002b40:	7821      	ldrb	r1, [r4, #0]
 8002b42:	2203      	movs	r2, #3
 8002b44:	4650      	mov	r0, sl
 8002b46:	f7fd fb4b 	bl	80001e0 <memchr>
 8002b4a:	b140      	cbz	r0, 8002b5e <_svfiprintf_r+0x152>
 8002b4c:	2340      	movs	r3, #64	; 0x40
 8002b4e:	eba0 000a 	sub.w	r0, r0, sl
 8002b52:	fa03 f000 	lsl.w	r0, r3, r0
 8002b56:	9b04      	ldr	r3, [sp, #16]
 8002b58:	4303      	orrs	r3, r0
 8002b5a:	3401      	adds	r4, #1
 8002b5c:	9304      	str	r3, [sp, #16]
 8002b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b62:	4826      	ldr	r0, [pc, #152]	; (8002bfc <_svfiprintf_r+0x1f0>)
 8002b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b68:	2206      	movs	r2, #6
 8002b6a:	f7fd fb39 	bl	80001e0 <memchr>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d038      	beq.n	8002be4 <_svfiprintf_r+0x1d8>
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <_svfiprintf_r+0x1f4>)
 8002b74:	bb1b      	cbnz	r3, 8002bbe <_svfiprintf_r+0x1b2>
 8002b76:	9b03      	ldr	r3, [sp, #12]
 8002b78:	3307      	adds	r3, #7
 8002b7a:	f023 0307 	bic.w	r3, r3, #7
 8002b7e:	3308      	adds	r3, #8
 8002b80:	9303      	str	r3, [sp, #12]
 8002b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b84:	4433      	add	r3, r6
 8002b86:	9309      	str	r3, [sp, #36]	; 0x24
 8002b88:	e767      	b.n	8002a5a <_svfiprintf_r+0x4e>
 8002b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b8e:	460c      	mov	r4, r1
 8002b90:	2001      	movs	r0, #1
 8002b92:	e7a5      	b.n	8002ae0 <_svfiprintf_r+0xd4>
 8002b94:	2300      	movs	r3, #0
 8002b96:	3401      	adds	r4, #1
 8002b98:	9305      	str	r3, [sp, #20]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f04f 0c0a 	mov.w	ip, #10
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ba6:	3a30      	subs	r2, #48	; 0x30
 8002ba8:	2a09      	cmp	r2, #9
 8002baa:	d903      	bls.n	8002bb4 <_svfiprintf_r+0x1a8>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0c5      	beq.n	8002b3c <_svfiprintf_r+0x130>
 8002bb0:	9105      	str	r1, [sp, #20]
 8002bb2:	e7c3      	b.n	8002b3c <_svfiprintf_r+0x130>
 8002bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bb8:	4604      	mov	r4, r0
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e7f0      	b.n	8002ba0 <_svfiprintf_r+0x194>
 8002bbe:	ab03      	add	r3, sp, #12
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	462a      	mov	r2, r5
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <_svfiprintf_r+0x1f8>)
 8002bc6:	a904      	add	r1, sp, #16
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f3af 8000 	nop.w
 8002bce:	1c42      	adds	r2, r0, #1
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	d1d6      	bne.n	8002b82 <_svfiprintf_r+0x176>
 8002bd4:	89ab      	ldrh	r3, [r5, #12]
 8002bd6:	065b      	lsls	r3, r3, #25
 8002bd8:	f53f af2c 	bmi.w	8002a34 <_svfiprintf_r+0x28>
 8002bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bde:	b01d      	add	sp, #116	; 0x74
 8002be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be4:	ab03      	add	r3, sp, #12
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	462a      	mov	r2, r5
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <_svfiprintf_r+0x1f8>)
 8002bec:	a904      	add	r1, sp, #16
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f000 f87a 	bl	8002ce8 <_printf_i>
 8002bf4:	e7eb      	b.n	8002bce <_svfiprintf_r+0x1c2>
 8002bf6:	bf00      	nop
 8002bf8:	08003764 	.word	0x08003764
 8002bfc:	0800376e 	.word	0x0800376e
 8002c00:	00000000 	.word	0x00000000
 8002c04:	08002955 	.word	0x08002955
 8002c08:	0800376a 	.word	0x0800376a

08002c0c <_printf_common>:
 8002c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	4616      	mov	r6, r2
 8002c12:	4699      	mov	r9, r3
 8002c14:	688a      	ldr	r2, [r1, #8]
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bfb8      	it	lt
 8002c20:	4613      	movlt	r3, r2
 8002c22:	6033      	str	r3, [r6, #0]
 8002c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c28:	4607      	mov	r7, r0
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	b10a      	cbz	r2, 8002c32 <_printf_common+0x26>
 8002c2e:	3301      	adds	r3, #1
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	0699      	lsls	r1, r3, #26
 8002c36:	bf42      	ittt	mi
 8002c38:	6833      	ldrmi	r3, [r6, #0]
 8002c3a:	3302      	addmi	r3, #2
 8002c3c:	6033      	strmi	r3, [r6, #0]
 8002c3e:	6825      	ldr	r5, [r4, #0]
 8002c40:	f015 0506 	ands.w	r5, r5, #6
 8002c44:	d106      	bne.n	8002c54 <_printf_common+0x48>
 8002c46:	f104 0a19 	add.w	sl, r4, #25
 8002c4a:	68e3      	ldr	r3, [r4, #12]
 8002c4c:	6832      	ldr	r2, [r6, #0]
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	42ab      	cmp	r3, r5
 8002c52:	dc26      	bgt.n	8002ca2 <_printf_common+0x96>
 8002c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c58:	1e13      	subs	r3, r2, #0
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	bf18      	it	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	0692      	lsls	r2, r2, #26
 8002c62:	d42b      	bmi.n	8002cbc <_printf_common+0xb0>
 8002c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c68:	4649      	mov	r1, r9
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	47c0      	blx	r8
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d01e      	beq.n	8002cb0 <_printf_common+0xa4>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	68e5      	ldr	r5, [r4, #12]
 8002c76:	6832      	ldr	r2, [r6, #0]
 8002c78:	f003 0306 	and.w	r3, r3, #6
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	bf08      	it	eq
 8002c80:	1aad      	subeq	r5, r5, r2
 8002c82:	68a3      	ldr	r3, [r4, #8]
 8002c84:	6922      	ldr	r2, [r4, #16]
 8002c86:	bf0c      	ite	eq
 8002c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c8c:	2500      	movne	r5, #0
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	bfc4      	itt	gt
 8002c92:	1a9b      	subgt	r3, r3, r2
 8002c94:	18ed      	addgt	r5, r5, r3
 8002c96:	2600      	movs	r6, #0
 8002c98:	341a      	adds	r4, #26
 8002c9a:	42b5      	cmp	r5, r6
 8002c9c:	d11a      	bne.n	8002cd4 <_printf_common+0xc8>
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	e008      	b.n	8002cb4 <_printf_common+0xa8>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	4652      	mov	r2, sl
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	4638      	mov	r0, r7
 8002caa:	47c0      	blx	r8
 8002cac:	3001      	adds	r0, #1
 8002cae:	d103      	bne.n	8002cb8 <_printf_common+0xac>
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	3501      	adds	r5, #1
 8002cba:	e7c6      	b.n	8002c4a <_printf_common+0x3e>
 8002cbc:	18e1      	adds	r1, r4, r3
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	2030      	movs	r0, #48	; 0x30
 8002cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cc6:	4422      	add	r2, r4
 8002cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	e7c7      	b.n	8002c64 <_printf_common+0x58>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	4649      	mov	r1, r9
 8002cda:	4638      	mov	r0, r7
 8002cdc:	47c0      	blx	r8
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d0e6      	beq.n	8002cb0 <_printf_common+0xa4>
 8002ce2:	3601      	adds	r6, #1
 8002ce4:	e7d9      	b.n	8002c9a <_printf_common+0x8e>
	...

08002ce8 <_printf_i>:
 8002ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cec:	7e0f      	ldrb	r7, [r1, #24]
 8002cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cf0:	2f78      	cmp	r7, #120	; 0x78
 8002cf2:	4691      	mov	r9, r2
 8002cf4:	4680      	mov	r8, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	469a      	mov	sl, r3
 8002cfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cfe:	d807      	bhi.n	8002d10 <_printf_i+0x28>
 8002d00:	2f62      	cmp	r7, #98	; 0x62
 8002d02:	d80a      	bhi.n	8002d1a <_printf_i+0x32>
 8002d04:	2f00      	cmp	r7, #0
 8002d06:	f000 80d8 	beq.w	8002eba <_printf_i+0x1d2>
 8002d0a:	2f58      	cmp	r7, #88	; 0x58
 8002d0c:	f000 80a3 	beq.w	8002e56 <_printf_i+0x16e>
 8002d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d18:	e03a      	b.n	8002d90 <_printf_i+0xa8>
 8002d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d1e:	2b15      	cmp	r3, #21
 8002d20:	d8f6      	bhi.n	8002d10 <_printf_i+0x28>
 8002d22:	a101      	add	r1, pc, #4	; (adr r1, 8002d28 <_printf_i+0x40>)
 8002d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d28:	08002d81 	.word	0x08002d81
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002d11 	.word	0x08002d11
 8002d34:	08002d11 	.word	0x08002d11
 8002d38:	08002d11 	.word	0x08002d11
 8002d3c:	08002d11 	.word	0x08002d11
 8002d40:	08002d95 	.word	0x08002d95
 8002d44:	08002d11 	.word	0x08002d11
 8002d48:	08002d11 	.word	0x08002d11
 8002d4c:	08002d11 	.word	0x08002d11
 8002d50:	08002d11 	.word	0x08002d11
 8002d54:	08002ea1 	.word	0x08002ea1
 8002d58:	08002dc5 	.word	0x08002dc5
 8002d5c:	08002e83 	.word	0x08002e83
 8002d60:	08002d11 	.word	0x08002d11
 8002d64:	08002d11 	.word	0x08002d11
 8002d68:	08002ec3 	.word	0x08002ec3
 8002d6c:	08002d11 	.word	0x08002d11
 8002d70:	08002dc5 	.word	0x08002dc5
 8002d74:	08002d11 	.word	0x08002d11
 8002d78:	08002d11 	.word	0x08002d11
 8002d7c:	08002e8b 	.word	0x08002e8b
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	1d1a      	adds	r2, r3, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	602a      	str	r2, [r5, #0]
 8002d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0a3      	b.n	8002edc <_printf_i+0x1f4>
 8002d94:	6820      	ldr	r0, [r4, #0]
 8002d96:	6829      	ldr	r1, [r5, #0]
 8002d98:	0606      	lsls	r6, r0, #24
 8002d9a:	f101 0304 	add.w	r3, r1, #4
 8002d9e:	d50a      	bpl.n	8002db6 <_printf_i+0xce>
 8002da0:	680e      	ldr	r6, [r1, #0]
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	2e00      	cmp	r6, #0
 8002da6:	da03      	bge.n	8002db0 <_printf_i+0xc8>
 8002da8:	232d      	movs	r3, #45	; 0x2d
 8002daa:	4276      	negs	r6, r6
 8002dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002db0:	485e      	ldr	r0, [pc, #376]	; (8002f2c <_printf_i+0x244>)
 8002db2:	230a      	movs	r3, #10
 8002db4:	e019      	b.n	8002dea <_printf_i+0x102>
 8002db6:	680e      	ldr	r6, [r1, #0]
 8002db8:	602b      	str	r3, [r5, #0]
 8002dba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dbe:	bf18      	it	ne
 8002dc0:	b236      	sxthne	r6, r6
 8002dc2:	e7ef      	b.n	8002da4 <_printf_i+0xbc>
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	1d19      	adds	r1, r3, #4
 8002dca:	6029      	str	r1, [r5, #0]
 8002dcc:	0601      	lsls	r1, r0, #24
 8002dce:	d501      	bpl.n	8002dd4 <_printf_i+0xec>
 8002dd0:	681e      	ldr	r6, [r3, #0]
 8002dd2:	e002      	b.n	8002dda <_printf_i+0xf2>
 8002dd4:	0646      	lsls	r6, r0, #25
 8002dd6:	d5fb      	bpl.n	8002dd0 <_printf_i+0xe8>
 8002dd8:	881e      	ldrh	r6, [r3, #0]
 8002dda:	4854      	ldr	r0, [pc, #336]	; (8002f2c <_printf_i+0x244>)
 8002ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8002dde:	bf0c      	ite	eq
 8002de0:	2308      	moveq	r3, #8
 8002de2:	230a      	movne	r3, #10
 8002de4:	2100      	movs	r1, #0
 8002de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dea:	6865      	ldr	r5, [r4, #4]
 8002dec:	60a5      	str	r5, [r4, #8]
 8002dee:	2d00      	cmp	r5, #0
 8002df0:	bfa2      	ittt	ge
 8002df2:	6821      	ldrge	r1, [r4, #0]
 8002df4:	f021 0104 	bicge.w	r1, r1, #4
 8002df8:	6021      	strge	r1, [r4, #0]
 8002dfa:	b90e      	cbnz	r6, 8002e00 <_printf_i+0x118>
 8002dfc:	2d00      	cmp	r5, #0
 8002dfe:	d04d      	beq.n	8002e9c <_printf_i+0x1b4>
 8002e00:	4615      	mov	r5, r2
 8002e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e06:	fb03 6711 	mls	r7, r3, r1, r6
 8002e0a:	5dc7      	ldrb	r7, [r0, r7]
 8002e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e10:	4637      	mov	r7, r6
 8002e12:	42bb      	cmp	r3, r7
 8002e14:	460e      	mov	r6, r1
 8002e16:	d9f4      	bls.n	8002e02 <_printf_i+0x11a>
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d10b      	bne.n	8002e34 <_printf_i+0x14c>
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	07de      	lsls	r6, r3, #31
 8002e20:	d508      	bpl.n	8002e34 <_printf_i+0x14c>
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	6861      	ldr	r1, [r4, #4]
 8002e26:	4299      	cmp	r1, r3
 8002e28:	bfde      	ittt	le
 8002e2a:	2330      	movle	r3, #48	; 0x30
 8002e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e34:	1b52      	subs	r2, r2, r5
 8002e36:	6122      	str	r2, [r4, #16]
 8002e38:	f8cd a000 	str.w	sl, [sp]
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	aa03      	add	r2, sp, #12
 8002e40:	4621      	mov	r1, r4
 8002e42:	4640      	mov	r0, r8
 8002e44:	f7ff fee2 	bl	8002c0c <_printf_common>
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d14c      	bne.n	8002ee6 <_printf_i+0x1fe>
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	b004      	add	sp, #16
 8002e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e56:	4835      	ldr	r0, [pc, #212]	; (8002f2c <_printf_i+0x244>)
 8002e58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e5c:	6829      	ldr	r1, [r5, #0]
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e64:	6029      	str	r1, [r5, #0]
 8002e66:	061d      	lsls	r5, r3, #24
 8002e68:	d514      	bpl.n	8002e94 <_printf_i+0x1ac>
 8002e6a:	07df      	lsls	r7, r3, #31
 8002e6c:	bf44      	itt	mi
 8002e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8002e72:	6023      	strmi	r3, [r4, #0]
 8002e74:	b91e      	cbnz	r6, 8002e7e <_printf_i+0x196>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	f023 0320 	bic.w	r3, r3, #32
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	2310      	movs	r3, #16
 8002e80:	e7b0      	b.n	8002de4 <_printf_i+0xfc>
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	f043 0320 	orr.w	r3, r3, #32
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	2378      	movs	r3, #120	; 0x78
 8002e8c:	4828      	ldr	r0, [pc, #160]	; (8002f30 <_printf_i+0x248>)
 8002e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e92:	e7e3      	b.n	8002e5c <_printf_i+0x174>
 8002e94:	0659      	lsls	r1, r3, #25
 8002e96:	bf48      	it	mi
 8002e98:	b2b6      	uxthmi	r6, r6
 8002e9a:	e7e6      	b.n	8002e6a <_printf_i+0x182>
 8002e9c:	4615      	mov	r5, r2
 8002e9e:	e7bb      	b.n	8002e18 <_printf_i+0x130>
 8002ea0:	682b      	ldr	r3, [r5, #0]
 8002ea2:	6826      	ldr	r6, [r4, #0]
 8002ea4:	6961      	ldr	r1, [r4, #20]
 8002ea6:	1d18      	adds	r0, r3, #4
 8002ea8:	6028      	str	r0, [r5, #0]
 8002eaa:	0635      	lsls	r5, r6, #24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	d501      	bpl.n	8002eb4 <_printf_i+0x1cc>
 8002eb0:	6019      	str	r1, [r3, #0]
 8002eb2:	e002      	b.n	8002eba <_printf_i+0x1d2>
 8002eb4:	0670      	lsls	r0, r6, #25
 8002eb6:	d5fb      	bpl.n	8002eb0 <_printf_i+0x1c8>
 8002eb8:	8019      	strh	r1, [r3, #0]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6123      	str	r3, [r4, #16]
 8002ebe:	4615      	mov	r5, r2
 8002ec0:	e7ba      	b.n	8002e38 <_printf_i+0x150>
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	602a      	str	r2, [r5, #0]
 8002ec8:	681d      	ldr	r5, [r3, #0]
 8002eca:	6862      	ldr	r2, [r4, #4]
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f7fd f986 	bl	80001e0 <memchr>
 8002ed4:	b108      	cbz	r0, 8002eda <_printf_i+0x1f2>
 8002ed6:	1b40      	subs	r0, r0, r5
 8002ed8:	6060      	str	r0, [r4, #4]
 8002eda:	6863      	ldr	r3, [r4, #4]
 8002edc:	6123      	str	r3, [r4, #16]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ee4:	e7a8      	b.n	8002e38 <_printf_i+0x150>
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	462a      	mov	r2, r5
 8002eea:	4649      	mov	r1, r9
 8002eec:	4640      	mov	r0, r8
 8002eee:	47d0      	blx	sl
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	d0ab      	beq.n	8002e4c <_printf_i+0x164>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	079b      	lsls	r3, r3, #30
 8002ef8:	d413      	bmi.n	8002f22 <_printf_i+0x23a>
 8002efa:	68e0      	ldr	r0, [r4, #12]
 8002efc:	9b03      	ldr	r3, [sp, #12]
 8002efe:	4298      	cmp	r0, r3
 8002f00:	bfb8      	it	lt
 8002f02:	4618      	movlt	r0, r3
 8002f04:	e7a4      	b.n	8002e50 <_printf_i+0x168>
 8002f06:	2301      	movs	r3, #1
 8002f08:	4632      	mov	r2, r6
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	47d0      	blx	sl
 8002f10:	3001      	adds	r0, #1
 8002f12:	d09b      	beq.n	8002e4c <_printf_i+0x164>
 8002f14:	3501      	adds	r5, #1
 8002f16:	68e3      	ldr	r3, [r4, #12]
 8002f18:	9903      	ldr	r1, [sp, #12]
 8002f1a:	1a5b      	subs	r3, r3, r1
 8002f1c:	42ab      	cmp	r3, r5
 8002f1e:	dcf2      	bgt.n	8002f06 <_printf_i+0x21e>
 8002f20:	e7eb      	b.n	8002efa <_printf_i+0x212>
 8002f22:	2500      	movs	r5, #0
 8002f24:	f104 0619 	add.w	r6, r4, #25
 8002f28:	e7f5      	b.n	8002f16 <_printf_i+0x22e>
 8002f2a:	bf00      	nop
 8002f2c:	08003775 	.word	0x08003775
 8002f30:	08003786 	.word	0x08003786

08002f34 <_putc_r>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	460d      	mov	r5, r1
 8002f38:	4614      	mov	r4, r2
 8002f3a:	4606      	mov	r6, r0
 8002f3c:	b118      	cbz	r0, 8002f46 <_putc_r+0x12>
 8002f3e:	6983      	ldr	r3, [r0, #24]
 8002f40:	b90b      	cbnz	r3, 8002f46 <_putc_r+0x12>
 8002f42:	f7ff fbd3 	bl	80026ec <__sinit>
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <_putc_r+0x84>)
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	d124      	bne.n	8002f96 <_putc_r+0x62>
 8002f4c:	6874      	ldr	r4, [r6, #4]
 8002f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f50:	07d8      	lsls	r0, r3, #31
 8002f52:	d405      	bmi.n	8002f60 <_putc_r+0x2c>
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	0599      	lsls	r1, r3, #22
 8002f58:	d402      	bmi.n	8002f60 <_putc_r+0x2c>
 8002f5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f5c:	f7ff fc64 	bl	8002828 <__retarget_lock_acquire_recursive>
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	60a3      	str	r3, [r4, #8]
 8002f68:	da05      	bge.n	8002f76 <_putc_r+0x42>
 8002f6a:	69a2      	ldr	r2, [r4, #24]
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	db1c      	blt.n	8002faa <_putc_r+0x76>
 8002f70:	b2eb      	uxtb	r3, r5
 8002f72:	2b0a      	cmp	r3, #10
 8002f74:	d019      	beq.n	8002faa <_putc_r+0x76>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	6022      	str	r2, [r4, #0]
 8002f7c:	701d      	strb	r5, [r3, #0]
 8002f7e:	b2ed      	uxtb	r5, r5
 8002f80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f82:	07da      	lsls	r2, r3, #31
 8002f84:	d405      	bmi.n	8002f92 <_putc_r+0x5e>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	059b      	lsls	r3, r3, #22
 8002f8a:	d402      	bmi.n	8002f92 <_putc_r+0x5e>
 8002f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f8e:	f7ff fc4c 	bl	800282a <__retarget_lock_release_recursive>
 8002f92:	4628      	mov	r0, r5
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <_putc_r+0x88>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	d101      	bne.n	8002fa0 <_putc_r+0x6c>
 8002f9c:	68b4      	ldr	r4, [r6, #8]
 8002f9e:	e7d6      	b.n	8002f4e <_putc_r+0x1a>
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <_putc_r+0x8c>)
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	bf08      	it	eq
 8002fa6:	68f4      	ldreq	r4, [r6, #12]
 8002fa8:	e7d1      	b.n	8002f4e <_putc_r+0x1a>
 8002faa:	4629      	mov	r1, r5
 8002fac:	4622      	mov	r2, r4
 8002fae:	4630      	mov	r0, r6
 8002fb0:	f000 f85c 	bl	800306c <__swbuf_r>
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	e7e3      	b.n	8002f80 <_putc_r+0x4c>
 8002fb8:	08003724 	.word	0x08003724
 8002fbc:	08003744 	.word	0x08003744
 8002fc0:	08003704 	.word	0x08003704

08002fc4 <_sbrk_r>:
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	4d06      	ldr	r5, [pc, #24]	; (8002fe0 <_sbrk_r+0x1c>)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4608      	mov	r0, r1
 8002fce:	602b      	str	r3, [r5, #0]
 8002fd0:	f7fd fe2c 	bl	8000c2c <_sbrk>
 8002fd4:	1c43      	adds	r3, r0, #1
 8002fd6:	d102      	bne.n	8002fde <_sbrk_r+0x1a>
 8002fd8:	682b      	ldr	r3, [r5, #0]
 8002fda:	b103      	cbz	r3, 8002fde <_sbrk_r+0x1a>
 8002fdc:	6023      	str	r3, [r4, #0]
 8002fde:	bd38      	pop	{r3, r4, r5, pc}
 8002fe0:	200001ac 	.word	0x200001ac

08002fe4 <__sread>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fec:	f000 fb0a 	bl	8003604 <_read_r>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	bfab      	itete	ge
 8002ff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ff8:	181b      	addge	r3, r3, r0
 8002ffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ffe:	bfac      	ite	ge
 8003000:	6563      	strge	r3, [r4, #84]	; 0x54
 8003002:	81a3      	strhlt	r3, [r4, #12]
 8003004:	bd10      	pop	{r4, pc}

08003006 <__swrite>:
 8003006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800300a:	461f      	mov	r7, r3
 800300c:	898b      	ldrh	r3, [r1, #12]
 800300e:	05db      	lsls	r3, r3, #23
 8003010:	4605      	mov	r5, r0
 8003012:	460c      	mov	r4, r1
 8003014:	4616      	mov	r6, r2
 8003016:	d505      	bpl.n	8003024 <__swrite+0x1e>
 8003018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301c:	2302      	movs	r3, #2
 800301e:	2200      	movs	r2, #0
 8003020:	f000 f9c8 	bl	80033b4 <_lseek_r>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800302a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	4632      	mov	r2, r6
 8003032:	463b      	mov	r3, r7
 8003034:	4628      	mov	r0, r5
 8003036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800303a:	f000 b869 	b.w	8003110 <_write_r>

0800303e <__sseek>:
 800303e:	b510      	push	{r4, lr}
 8003040:	460c      	mov	r4, r1
 8003042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003046:	f000 f9b5 	bl	80033b4 <_lseek_r>
 800304a:	1c43      	adds	r3, r0, #1
 800304c:	89a3      	ldrh	r3, [r4, #12]
 800304e:	bf15      	itete	ne
 8003050:	6560      	strne	r0, [r4, #84]	; 0x54
 8003052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800305a:	81a3      	strheq	r3, [r4, #12]
 800305c:	bf18      	it	ne
 800305e:	81a3      	strhne	r3, [r4, #12]
 8003060:	bd10      	pop	{r4, pc}

08003062 <__sclose>:
 8003062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003066:	f000 b8d3 	b.w	8003210 <_close_r>
	...

0800306c <__swbuf_r>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	460e      	mov	r6, r1
 8003070:	4614      	mov	r4, r2
 8003072:	4605      	mov	r5, r0
 8003074:	b118      	cbz	r0, 800307e <__swbuf_r+0x12>
 8003076:	6983      	ldr	r3, [r0, #24]
 8003078:	b90b      	cbnz	r3, 800307e <__swbuf_r+0x12>
 800307a:	f7ff fb37 	bl	80026ec <__sinit>
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <__swbuf_r+0x98>)
 8003080:	429c      	cmp	r4, r3
 8003082:	d12b      	bne.n	80030dc <__swbuf_r+0x70>
 8003084:	686c      	ldr	r4, [r5, #4]
 8003086:	69a3      	ldr	r3, [r4, #24]
 8003088:	60a3      	str	r3, [r4, #8]
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	071a      	lsls	r2, r3, #28
 800308e:	d52f      	bpl.n	80030f0 <__swbuf_r+0x84>
 8003090:	6923      	ldr	r3, [r4, #16]
 8003092:	b36b      	cbz	r3, 80030f0 <__swbuf_r+0x84>
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	6820      	ldr	r0, [r4, #0]
 8003098:	1ac0      	subs	r0, r0, r3
 800309a:	6963      	ldr	r3, [r4, #20]
 800309c:	b2f6      	uxtb	r6, r6
 800309e:	4283      	cmp	r3, r0
 80030a0:	4637      	mov	r7, r6
 80030a2:	dc04      	bgt.n	80030ae <__swbuf_r+0x42>
 80030a4:	4621      	mov	r1, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	f000 f948 	bl	800333c <_fflush_r>
 80030ac:	bb30      	cbnz	r0, 80030fc <__swbuf_r+0x90>
 80030ae:	68a3      	ldr	r3, [r4, #8]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	60a3      	str	r3, [r4, #8]
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	6022      	str	r2, [r4, #0]
 80030ba:	701e      	strb	r6, [r3, #0]
 80030bc:	6963      	ldr	r3, [r4, #20]
 80030be:	3001      	adds	r0, #1
 80030c0:	4283      	cmp	r3, r0
 80030c2:	d004      	beq.n	80030ce <__swbuf_r+0x62>
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	07db      	lsls	r3, r3, #31
 80030c8:	d506      	bpl.n	80030d8 <__swbuf_r+0x6c>
 80030ca:	2e0a      	cmp	r6, #10
 80030cc:	d104      	bne.n	80030d8 <__swbuf_r+0x6c>
 80030ce:	4621      	mov	r1, r4
 80030d0:	4628      	mov	r0, r5
 80030d2:	f000 f933 	bl	800333c <_fflush_r>
 80030d6:	b988      	cbnz	r0, 80030fc <__swbuf_r+0x90>
 80030d8:	4638      	mov	r0, r7
 80030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <__swbuf_r+0x9c>)
 80030de:	429c      	cmp	r4, r3
 80030e0:	d101      	bne.n	80030e6 <__swbuf_r+0x7a>
 80030e2:	68ac      	ldr	r4, [r5, #8]
 80030e4:	e7cf      	b.n	8003086 <__swbuf_r+0x1a>
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <__swbuf_r+0xa0>)
 80030e8:	429c      	cmp	r4, r3
 80030ea:	bf08      	it	eq
 80030ec:	68ec      	ldreq	r4, [r5, #12]
 80030ee:	e7ca      	b.n	8003086 <__swbuf_r+0x1a>
 80030f0:	4621      	mov	r1, r4
 80030f2:	4628      	mov	r0, r5
 80030f4:	f000 f81e 	bl	8003134 <__swsetup_r>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d0cb      	beq.n	8003094 <__swbuf_r+0x28>
 80030fc:	f04f 37ff 	mov.w	r7, #4294967295
 8003100:	e7ea      	b.n	80030d8 <__swbuf_r+0x6c>
 8003102:	bf00      	nop
 8003104:	08003724 	.word	0x08003724
 8003108:	08003744 	.word	0x08003744
 800310c:	08003704 	.word	0x08003704

08003110 <_write_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	4d07      	ldr	r5, [pc, #28]	; (8003130 <_write_r+0x20>)
 8003114:	4604      	mov	r4, r0
 8003116:	4608      	mov	r0, r1
 8003118:	4611      	mov	r1, r2
 800311a:	2200      	movs	r2, #0
 800311c:	602a      	str	r2, [r5, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	f7fd fd33 	bl	8000b8a <_write>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d102      	bne.n	800312e <_write_r+0x1e>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	b103      	cbz	r3, 800312e <_write_r+0x1e>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	200001ac 	.word	0x200001ac

08003134 <__swsetup_r>:
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <__swsetup_r+0xcc>)
 8003136:	b570      	push	{r4, r5, r6, lr}
 8003138:	681d      	ldr	r5, [r3, #0]
 800313a:	4606      	mov	r6, r0
 800313c:	460c      	mov	r4, r1
 800313e:	b125      	cbz	r5, 800314a <__swsetup_r+0x16>
 8003140:	69ab      	ldr	r3, [r5, #24]
 8003142:	b913      	cbnz	r3, 800314a <__swsetup_r+0x16>
 8003144:	4628      	mov	r0, r5
 8003146:	f7ff fad1 	bl	80026ec <__sinit>
 800314a:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <__swsetup_r+0xd0>)
 800314c:	429c      	cmp	r4, r3
 800314e:	d10f      	bne.n	8003170 <__swsetup_r+0x3c>
 8003150:	686c      	ldr	r4, [r5, #4]
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003158:	0719      	lsls	r1, r3, #28
 800315a:	d42c      	bmi.n	80031b6 <__swsetup_r+0x82>
 800315c:	06dd      	lsls	r5, r3, #27
 800315e:	d411      	bmi.n	8003184 <__swsetup_r+0x50>
 8003160:	2309      	movs	r3, #9
 8003162:	6033      	str	r3, [r6, #0]
 8003164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003168:	81a3      	strh	r3, [r4, #12]
 800316a:	f04f 30ff 	mov.w	r0, #4294967295
 800316e:	e03e      	b.n	80031ee <__swsetup_r+0xba>
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <__swsetup_r+0xd4>)
 8003172:	429c      	cmp	r4, r3
 8003174:	d101      	bne.n	800317a <__swsetup_r+0x46>
 8003176:	68ac      	ldr	r4, [r5, #8]
 8003178:	e7eb      	b.n	8003152 <__swsetup_r+0x1e>
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <__swsetup_r+0xd8>)
 800317c:	429c      	cmp	r4, r3
 800317e:	bf08      	it	eq
 8003180:	68ec      	ldreq	r4, [r5, #12]
 8003182:	e7e6      	b.n	8003152 <__swsetup_r+0x1e>
 8003184:	0758      	lsls	r0, r3, #29
 8003186:	d512      	bpl.n	80031ae <__swsetup_r+0x7a>
 8003188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800318a:	b141      	cbz	r1, 800319e <__swsetup_r+0x6a>
 800318c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003190:	4299      	cmp	r1, r3
 8003192:	d002      	beq.n	800319a <__swsetup_r+0x66>
 8003194:	4630      	mov	r0, r6
 8003196:	f000 f9b9 	bl	800350c <_free_r>
 800319a:	2300      	movs	r3, #0
 800319c:	6363      	str	r3, [r4, #52]	; 0x34
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	2300      	movs	r3, #0
 80031a8:	6063      	str	r3, [r4, #4]
 80031aa:	6923      	ldr	r3, [r4, #16]
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	81a3      	strh	r3, [r4, #12]
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	b94b      	cbnz	r3, 80031ce <__swsetup_r+0x9a>
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c4:	d003      	beq.n	80031ce <__swsetup_r+0x9a>
 80031c6:	4621      	mov	r1, r4
 80031c8:	4630      	mov	r0, r6
 80031ca:	f000 f92b 	bl	8003424 <__smakebuf_r>
 80031ce:	89a0      	ldrh	r0, [r4, #12]
 80031d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031d4:	f010 0301 	ands.w	r3, r0, #1
 80031d8:	d00a      	beq.n	80031f0 <__swsetup_r+0xbc>
 80031da:	2300      	movs	r3, #0
 80031dc:	60a3      	str	r3, [r4, #8]
 80031de:	6963      	ldr	r3, [r4, #20]
 80031e0:	425b      	negs	r3, r3
 80031e2:	61a3      	str	r3, [r4, #24]
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	b943      	cbnz	r3, 80031fa <__swsetup_r+0xc6>
 80031e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031ec:	d1ba      	bne.n	8003164 <__swsetup_r+0x30>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	0781      	lsls	r1, r0, #30
 80031f2:	bf58      	it	pl
 80031f4:	6963      	ldrpl	r3, [r4, #20]
 80031f6:	60a3      	str	r3, [r4, #8]
 80031f8:	e7f4      	b.n	80031e4 <__swsetup_r+0xb0>
 80031fa:	2000      	movs	r0, #0
 80031fc:	e7f7      	b.n	80031ee <__swsetup_r+0xba>
 80031fe:	bf00      	nop
 8003200:	2000000c 	.word	0x2000000c
 8003204:	08003724 	.word	0x08003724
 8003208:	08003744 	.word	0x08003744
 800320c:	08003704 	.word	0x08003704

08003210 <_close_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4d06      	ldr	r5, [pc, #24]	; (800322c <_close_r+0x1c>)
 8003214:	2300      	movs	r3, #0
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fcd1 	bl	8000bc2 <_close>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_close_r+0x1a>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_close_r+0x1a>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	200001ac 	.word	0x200001ac

08003230 <__sflush_r>:
 8003230:	898a      	ldrh	r2, [r1, #12]
 8003232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003236:	4605      	mov	r5, r0
 8003238:	0710      	lsls	r0, r2, #28
 800323a:	460c      	mov	r4, r1
 800323c:	d458      	bmi.n	80032f0 <__sflush_r+0xc0>
 800323e:	684b      	ldr	r3, [r1, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dc05      	bgt.n	8003250 <__sflush_r+0x20>
 8003244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	dc02      	bgt.n	8003250 <__sflush_r+0x20>
 800324a:	2000      	movs	r0, #0
 800324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003252:	2e00      	cmp	r6, #0
 8003254:	d0f9      	beq.n	800324a <__sflush_r+0x1a>
 8003256:	2300      	movs	r3, #0
 8003258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800325c:	682f      	ldr	r7, [r5, #0]
 800325e:	602b      	str	r3, [r5, #0]
 8003260:	d032      	beq.n	80032c8 <__sflush_r+0x98>
 8003262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	075a      	lsls	r2, r3, #29
 8003268:	d505      	bpl.n	8003276 <__sflush_r+0x46>
 800326a:	6863      	ldr	r3, [r4, #4]
 800326c:	1ac0      	subs	r0, r0, r3
 800326e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003270:	b10b      	cbz	r3, 8003276 <__sflush_r+0x46>
 8003272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003274:	1ac0      	subs	r0, r0, r3
 8003276:	2300      	movs	r3, #0
 8003278:	4602      	mov	r2, r0
 800327a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800327c:	6a21      	ldr	r1, [r4, #32]
 800327e:	4628      	mov	r0, r5
 8003280:	47b0      	blx	r6
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	d106      	bne.n	8003296 <__sflush_r+0x66>
 8003288:	6829      	ldr	r1, [r5, #0]
 800328a:	291d      	cmp	r1, #29
 800328c:	d82c      	bhi.n	80032e8 <__sflush_r+0xb8>
 800328e:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <__sflush_r+0x108>)
 8003290:	40ca      	lsrs	r2, r1
 8003292:	07d6      	lsls	r6, r2, #31
 8003294:	d528      	bpl.n	80032e8 <__sflush_r+0xb8>
 8003296:	2200      	movs	r2, #0
 8003298:	6062      	str	r2, [r4, #4]
 800329a:	04d9      	lsls	r1, r3, #19
 800329c:	6922      	ldr	r2, [r4, #16]
 800329e:	6022      	str	r2, [r4, #0]
 80032a0:	d504      	bpl.n	80032ac <__sflush_r+0x7c>
 80032a2:	1c42      	adds	r2, r0, #1
 80032a4:	d101      	bne.n	80032aa <__sflush_r+0x7a>
 80032a6:	682b      	ldr	r3, [r5, #0]
 80032a8:	b903      	cbnz	r3, 80032ac <__sflush_r+0x7c>
 80032aa:	6560      	str	r0, [r4, #84]	; 0x54
 80032ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ae:	602f      	str	r7, [r5, #0]
 80032b0:	2900      	cmp	r1, #0
 80032b2:	d0ca      	beq.n	800324a <__sflush_r+0x1a>
 80032b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b8:	4299      	cmp	r1, r3
 80032ba:	d002      	beq.n	80032c2 <__sflush_r+0x92>
 80032bc:	4628      	mov	r0, r5
 80032be:	f000 f925 	bl	800350c <_free_r>
 80032c2:	2000      	movs	r0, #0
 80032c4:	6360      	str	r0, [r4, #52]	; 0x34
 80032c6:	e7c1      	b.n	800324c <__sflush_r+0x1c>
 80032c8:	6a21      	ldr	r1, [r4, #32]
 80032ca:	2301      	movs	r3, #1
 80032cc:	4628      	mov	r0, r5
 80032ce:	47b0      	blx	r6
 80032d0:	1c41      	adds	r1, r0, #1
 80032d2:	d1c7      	bne.n	8003264 <__sflush_r+0x34>
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0c4      	beq.n	8003264 <__sflush_r+0x34>
 80032da:	2b1d      	cmp	r3, #29
 80032dc:	d001      	beq.n	80032e2 <__sflush_r+0xb2>
 80032de:	2b16      	cmp	r3, #22
 80032e0:	d101      	bne.n	80032e6 <__sflush_r+0xb6>
 80032e2:	602f      	str	r7, [r5, #0]
 80032e4:	e7b1      	b.n	800324a <__sflush_r+0x1a>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	e7ad      	b.n	800324c <__sflush_r+0x1c>
 80032f0:	690f      	ldr	r7, [r1, #16]
 80032f2:	2f00      	cmp	r7, #0
 80032f4:	d0a9      	beq.n	800324a <__sflush_r+0x1a>
 80032f6:	0793      	lsls	r3, r2, #30
 80032f8:	680e      	ldr	r6, [r1, #0]
 80032fa:	bf08      	it	eq
 80032fc:	694b      	ldreq	r3, [r1, #20]
 80032fe:	600f      	str	r7, [r1, #0]
 8003300:	bf18      	it	ne
 8003302:	2300      	movne	r3, #0
 8003304:	eba6 0807 	sub.w	r8, r6, r7
 8003308:	608b      	str	r3, [r1, #8]
 800330a:	f1b8 0f00 	cmp.w	r8, #0
 800330e:	dd9c      	ble.n	800324a <__sflush_r+0x1a>
 8003310:	6a21      	ldr	r1, [r4, #32]
 8003312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003314:	4643      	mov	r3, r8
 8003316:	463a      	mov	r2, r7
 8003318:	4628      	mov	r0, r5
 800331a:	47b0      	blx	r6
 800331c:	2800      	cmp	r0, #0
 800331e:	dc06      	bgt.n	800332e <__sflush_r+0xfe>
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	e78e      	b.n	800324c <__sflush_r+0x1c>
 800332e:	4407      	add	r7, r0
 8003330:	eba8 0800 	sub.w	r8, r8, r0
 8003334:	e7e9      	b.n	800330a <__sflush_r+0xda>
 8003336:	bf00      	nop
 8003338:	20400001 	.word	0x20400001

0800333c <_fflush_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	690b      	ldr	r3, [r1, #16]
 8003340:	4605      	mov	r5, r0
 8003342:	460c      	mov	r4, r1
 8003344:	b913      	cbnz	r3, 800334c <_fflush_r+0x10>
 8003346:	2500      	movs	r5, #0
 8003348:	4628      	mov	r0, r5
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	b118      	cbz	r0, 8003356 <_fflush_r+0x1a>
 800334e:	6983      	ldr	r3, [r0, #24]
 8003350:	b90b      	cbnz	r3, 8003356 <_fflush_r+0x1a>
 8003352:	f7ff f9cb 	bl	80026ec <__sinit>
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <_fflush_r+0x6c>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d11b      	bne.n	8003394 <_fflush_r+0x58>
 800335c:	686c      	ldr	r4, [r5, #4]
 800335e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0ef      	beq.n	8003346 <_fflush_r+0xa>
 8003366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003368:	07d0      	lsls	r0, r2, #31
 800336a:	d404      	bmi.n	8003376 <_fflush_r+0x3a>
 800336c:	0599      	lsls	r1, r3, #22
 800336e:	d402      	bmi.n	8003376 <_fflush_r+0x3a>
 8003370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003372:	f7ff fa59 	bl	8002828 <__retarget_lock_acquire_recursive>
 8003376:	4628      	mov	r0, r5
 8003378:	4621      	mov	r1, r4
 800337a:	f7ff ff59 	bl	8003230 <__sflush_r>
 800337e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003380:	07da      	lsls	r2, r3, #31
 8003382:	4605      	mov	r5, r0
 8003384:	d4e0      	bmi.n	8003348 <_fflush_r+0xc>
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	059b      	lsls	r3, r3, #22
 800338a:	d4dd      	bmi.n	8003348 <_fflush_r+0xc>
 800338c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800338e:	f7ff fa4c 	bl	800282a <__retarget_lock_release_recursive>
 8003392:	e7d9      	b.n	8003348 <_fflush_r+0xc>
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <_fflush_r+0x70>)
 8003396:	429c      	cmp	r4, r3
 8003398:	d101      	bne.n	800339e <_fflush_r+0x62>
 800339a:	68ac      	ldr	r4, [r5, #8]
 800339c:	e7df      	b.n	800335e <_fflush_r+0x22>
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <_fflush_r+0x74>)
 80033a0:	429c      	cmp	r4, r3
 80033a2:	bf08      	it	eq
 80033a4:	68ec      	ldreq	r4, [r5, #12]
 80033a6:	e7da      	b.n	800335e <_fflush_r+0x22>
 80033a8:	08003724 	.word	0x08003724
 80033ac:	08003744 	.word	0x08003744
 80033b0:	08003704 	.word	0x08003704

080033b4 <_lseek_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4d07      	ldr	r5, [pc, #28]	; (80033d4 <_lseek_r+0x20>)
 80033b8:	4604      	mov	r4, r0
 80033ba:	4608      	mov	r0, r1
 80033bc:	4611      	mov	r1, r2
 80033be:	2200      	movs	r2, #0
 80033c0:	602a      	str	r2, [r5, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f7fd fc24 	bl	8000c10 <_lseek>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_lseek_r+0x1e>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_lseek_r+0x1e>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	200001ac 	.word	0x200001ac

080033d8 <__swhatbuf_r>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	460e      	mov	r6, r1
 80033dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e0:	2900      	cmp	r1, #0
 80033e2:	b096      	sub	sp, #88	; 0x58
 80033e4:	4614      	mov	r4, r2
 80033e6:	461d      	mov	r5, r3
 80033e8:	da08      	bge.n	80033fc <__swhatbuf_r+0x24>
 80033ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	602a      	str	r2, [r5, #0]
 80033f2:	061a      	lsls	r2, r3, #24
 80033f4:	d410      	bmi.n	8003418 <__swhatbuf_r+0x40>
 80033f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fa:	e00e      	b.n	800341a <__swhatbuf_r+0x42>
 80033fc:	466a      	mov	r2, sp
 80033fe:	f000 f913 	bl	8003628 <_fstat_r>
 8003402:	2800      	cmp	r0, #0
 8003404:	dbf1      	blt.n	80033ea <__swhatbuf_r+0x12>
 8003406:	9a01      	ldr	r2, [sp, #4]
 8003408:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800340c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003410:	425a      	negs	r2, r3
 8003412:	415a      	adcs	r2, r3
 8003414:	602a      	str	r2, [r5, #0]
 8003416:	e7ee      	b.n	80033f6 <__swhatbuf_r+0x1e>
 8003418:	2340      	movs	r3, #64	; 0x40
 800341a:	2000      	movs	r0, #0
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	b016      	add	sp, #88	; 0x58
 8003420:	bd70      	pop	{r4, r5, r6, pc}
	...

08003424 <__smakebuf_r>:
 8003424:	898b      	ldrh	r3, [r1, #12]
 8003426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003428:	079d      	lsls	r5, r3, #30
 800342a:	4606      	mov	r6, r0
 800342c:	460c      	mov	r4, r1
 800342e:	d507      	bpl.n	8003440 <__smakebuf_r+0x1c>
 8003430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	2301      	movs	r3, #1
 800343a:	6163      	str	r3, [r4, #20]
 800343c:	b002      	add	sp, #8
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	ab01      	add	r3, sp, #4
 8003442:	466a      	mov	r2, sp
 8003444:	f7ff ffc8 	bl	80033d8 <__swhatbuf_r>
 8003448:	9900      	ldr	r1, [sp, #0]
 800344a:	4605      	mov	r5, r0
 800344c:	4630      	mov	r0, r6
 800344e:	f7ff fa0d 	bl	800286c <_malloc_r>
 8003452:	b948      	cbnz	r0, 8003468 <__smakebuf_r+0x44>
 8003454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003458:	059a      	lsls	r2, r3, #22
 800345a:	d4ef      	bmi.n	800343c <__smakebuf_r+0x18>
 800345c:	f023 0303 	bic.w	r3, r3, #3
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	81a3      	strh	r3, [r4, #12]
 8003466:	e7e3      	b.n	8003430 <__smakebuf_r+0xc>
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <__smakebuf_r+0x7c>)
 800346a:	62b3      	str	r3, [r6, #40]	; 0x28
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	6020      	str	r0, [r4, #0]
 8003470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003474:	81a3      	strh	r3, [r4, #12]
 8003476:	9b00      	ldr	r3, [sp, #0]
 8003478:	6163      	str	r3, [r4, #20]
 800347a:	9b01      	ldr	r3, [sp, #4]
 800347c:	6120      	str	r0, [r4, #16]
 800347e:	b15b      	cbz	r3, 8003498 <__smakebuf_r+0x74>
 8003480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003484:	4630      	mov	r0, r6
 8003486:	f000 f8e1 	bl	800364c <_isatty_r>
 800348a:	b128      	cbz	r0, 8003498 <__smakebuf_r+0x74>
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	89a0      	ldrh	r0, [r4, #12]
 800349a:	4305      	orrs	r5, r0
 800349c:	81a5      	strh	r5, [r4, #12]
 800349e:	e7cd      	b.n	800343c <__smakebuf_r+0x18>
 80034a0:	08002685 	.word	0x08002685

080034a4 <memcpy>:
 80034a4:	440a      	add	r2, r1
 80034a6:	4291      	cmp	r1, r2
 80034a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80034ac:	d100      	bne.n	80034b0 <memcpy+0xc>
 80034ae:	4770      	bx	lr
 80034b0:	b510      	push	{r4, lr}
 80034b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034ba:	4291      	cmp	r1, r2
 80034bc:	d1f9      	bne.n	80034b2 <memcpy+0xe>
 80034be:	bd10      	pop	{r4, pc}

080034c0 <memmove>:
 80034c0:	4288      	cmp	r0, r1
 80034c2:	b510      	push	{r4, lr}
 80034c4:	eb01 0402 	add.w	r4, r1, r2
 80034c8:	d902      	bls.n	80034d0 <memmove+0x10>
 80034ca:	4284      	cmp	r4, r0
 80034cc:	4623      	mov	r3, r4
 80034ce:	d807      	bhi.n	80034e0 <memmove+0x20>
 80034d0:	1e43      	subs	r3, r0, #1
 80034d2:	42a1      	cmp	r1, r4
 80034d4:	d008      	beq.n	80034e8 <memmove+0x28>
 80034d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034de:	e7f8      	b.n	80034d2 <memmove+0x12>
 80034e0:	4402      	add	r2, r0
 80034e2:	4601      	mov	r1, r0
 80034e4:	428a      	cmp	r2, r1
 80034e6:	d100      	bne.n	80034ea <memmove+0x2a>
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034f2:	e7f7      	b.n	80034e4 <memmove+0x24>

080034f4 <__malloc_lock>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__malloc_lock+0x8>)
 80034f6:	f7ff b997 	b.w	8002828 <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	200001a0 	.word	0x200001a0

08003500 <__malloc_unlock>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__malloc_unlock+0x8>)
 8003502:	f7ff b992 	b.w	800282a <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	200001a0 	.word	0x200001a0

0800350c <_free_r>:
 800350c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800350e:	2900      	cmp	r1, #0
 8003510:	d044      	beq.n	800359c <_free_r+0x90>
 8003512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003516:	9001      	str	r0, [sp, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f1a1 0404 	sub.w	r4, r1, #4
 800351e:	bfb8      	it	lt
 8003520:	18e4      	addlt	r4, r4, r3
 8003522:	f7ff ffe7 	bl	80034f4 <__malloc_lock>
 8003526:	4a1e      	ldr	r2, [pc, #120]	; (80035a0 <_free_r+0x94>)
 8003528:	9801      	ldr	r0, [sp, #4]
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	b933      	cbnz	r3, 800353c <_free_r+0x30>
 800352e:	6063      	str	r3, [r4, #4]
 8003530:	6014      	str	r4, [r2, #0]
 8003532:	b003      	add	sp, #12
 8003534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003538:	f7ff bfe2 	b.w	8003500 <__malloc_unlock>
 800353c:	42a3      	cmp	r3, r4
 800353e:	d908      	bls.n	8003552 <_free_r+0x46>
 8003540:	6825      	ldr	r5, [r4, #0]
 8003542:	1961      	adds	r1, r4, r5
 8003544:	428b      	cmp	r3, r1
 8003546:	bf01      	itttt	eq
 8003548:	6819      	ldreq	r1, [r3, #0]
 800354a:	685b      	ldreq	r3, [r3, #4]
 800354c:	1949      	addeq	r1, r1, r5
 800354e:	6021      	streq	r1, [r4, #0]
 8003550:	e7ed      	b.n	800352e <_free_r+0x22>
 8003552:	461a      	mov	r2, r3
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	b10b      	cbz	r3, 800355c <_free_r+0x50>
 8003558:	42a3      	cmp	r3, r4
 800355a:	d9fa      	bls.n	8003552 <_free_r+0x46>
 800355c:	6811      	ldr	r1, [r2, #0]
 800355e:	1855      	adds	r5, r2, r1
 8003560:	42a5      	cmp	r5, r4
 8003562:	d10b      	bne.n	800357c <_free_r+0x70>
 8003564:	6824      	ldr	r4, [r4, #0]
 8003566:	4421      	add	r1, r4
 8003568:	1854      	adds	r4, r2, r1
 800356a:	42a3      	cmp	r3, r4
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	d1e0      	bne.n	8003532 <_free_r+0x26>
 8003570:	681c      	ldr	r4, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	6053      	str	r3, [r2, #4]
 8003576:	4421      	add	r1, r4
 8003578:	6011      	str	r1, [r2, #0]
 800357a:	e7da      	b.n	8003532 <_free_r+0x26>
 800357c:	d902      	bls.n	8003584 <_free_r+0x78>
 800357e:	230c      	movs	r3, #12
 8003580:	6003      	str	r3, [r0, #0]
 8003582:	e7d6      	b.n	8003532 <_free_r+0x26>
 8003584:	6825      	ldr	r5, [r4, #0]
 8003586:	1961      	adds	r1, r4, r5
 8003588:	428b      	cmp	r3, r1
 800358a:	bf04      	itt	eq
 800358c:	6819      	ldreq	r1, [r3, #0]
 800358e:	685b      	ldreq	r3, [r3, #4]
 8003590:	6063      	str	r3, [r4, #4]
 8003592:	bf04      	itt	eq
 8003594:	1949      	addeq	r1, r1, r5
 8003596:	6021      	streq	r1, [r4, #0]
 8003598:	6054      	str	r4, [r2, #4]
 800359a:	e7ca      	b.n	8003532 <_free_r+0x26>
 800359c:	b003      	add	sp, #12
 800359e:	bd30      	pop	{r4, r5, pc}
 80035a0:	200001a4 	.word	0x200001a4

080035a4 <_realloc_r>:
 80035a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	4680      	mov	r8, r0
 80035aa:	4614      	mov	r4, r2
 80035ac:	460e      	mov	r6, r1
 80035ae:	b921      	cbnz	r1, 80035ba <_realloc_r+0x16>
 80035b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035b4:	4611      	mov	r1, r2
 80035b6:	f7ff b959 	b.w	800286c <_malloc_r>
 80035ba:	b92a      	cbnz	r2, 80035c8 <_realloc_r+0x24>
 80035bc:	f7ff ffa6 	bl	800350c <_free_r>
 80035c0:	4625      	mov	r5, r4
 80035c2:	4628      	mov	r0, r5
 80035c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035c8:	f000 f850 	bl	800366c <_malloc_usable_size_r>
 80035cc:	4284      	cmp	r4, r0
 80035ce:	4607      	mov	r7, r0
 80035d0:	d802      	bhi.n	80035d8 <_realloc_r+0x34>
 80035d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035d6:	d812      	bhi.n	80035fe <_realloc_r+0x5a>
 80035d8:	4621      	mov	r1, r4
 80035da:	4640      	mov	r0, r8
 80035dc:	f7ff f946 	bl	800286c <_malloc_r>
 80035e0:	4605      	mov	r5, r0
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d0ed      	beq.n	80035c2 <_realloc_r+0x1e>
 80035e6:	42bc      	cmp	r4, r7
 80035e8:	4622      	mov	r2, r4
 80035ea:	4631      	mov	r1, r6
 80035ec:	bf28      	it	cs
 80035ee:	463a      	movcs	r2, r7
 80035f0:	f7ff ff58 	bl	80034a4 <memcpy>
 80035f4:	4631      	mov	r1, r6
 80035f6:	4640      	mov	r0, r8
 80035f8:	f7ff ff88 	bl	800350c <_free_r>
 80035fc:	e7e1      	b.n	80035c2 <_realloc_r+0x1e>
 80035fe:	4635      	mov	r5, r6
 8003600:	e7df      	b.n	80035c2 <_realloc_r+0x1e>
	...

08003604 <_read_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4d07      	ldr	r5, [pc, #28]	; (8003624 <_read_r+0x20>)
 8003608:	4604      	mov	r4, r0
 800360a:	4608      	mov	r0, r1
 800360c:	4611      	mov	r1, r2
 800360e:	2200      	movs	r2, #0
 8003610:	602a      	str	r2, [r5, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f7fd fa9c 	bl	8000b50 <_read>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_read_r+0x1e>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_read_r+0x1e>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	200001ac 	.word	0x200001ac

08003628 <_fstat_r>:
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	4d07      	ldr	r5, [pc, #28]	; (8003648 <_fstat_r+0x20>)
 800362c:	2300      	movs	r3, #0
 800362e:	4604      	mov	r4, r0
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	602b      	str	r3, [r5, #0]
 8003636:	f7fd fad0 	bl	8000bda <_fstat>
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	d102      	bne.n	8003644 <_fstat_r+0x1c>
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	b103      	cbz	r3, 8003644 <_fstat_r+0x1c>
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	bd38      	pop	{r3, r4, r5, pc}
 8003646:	bf00      	nop
 8003648:	200001ac 	.word	0x200001ac

0800364c <_isatty_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4d06      	ldr	r5, [pc, #24]	; (8003668 <_isatty_r+0x1c>)
 8003650:	2300      	movs	r3, #0
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	602b      	str	r3, [r5, #0]
 8003658:	f7fd facf 	bl	8000bfa <_isatty>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_isatty_r+0x1a>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_isatty_r+0x1a>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	200001ac 	.word	0x200001ac

0800366c <_malloc_usable_size_r>:
 800366c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003670:	1f18      	subs	r0, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	bfbc      	itt	lt
 8003676:	580b      	ldrlt	r3, [r1, r0]
 8003678:	18c0      	addlt	r0, r0, r3
 800367a:	4770      	bx	lr

0800367c <_init>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr

08003688 <_fini>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr
